
@{
    ViewBag.Title = "保养关联项目配置";
}

<link href="~/Content/BaoYangActivitySetting/Vue.css" rel="stylesheet" type="text/css" />
<link href="~/Content/Public/Public.css" rel="stylesheet" type="text/css" />
<link href="~/Content/iview/iview.css" rel="stylesheet" type="text/css" />
<h2>保养关联项目配置</h2>
<style>
    fieldset {
        height: auto;
        margin: 5px 0px 15px 0px;
        padding: 15px 20px;
    }

        fieldset > label {
            display: inline-block;
            height: 30px;
            max-width: 100%;
            font-weight: bold;
            margin-left: 10px;
        }

    textarea {
        resize: none;
    }

    input[type="text"] {
        border: none;
    }

    .ivu-tag {
        white-space: nowrap;
    }
</style>
<div id="vue" v-cloak>
    <fieldset>
        <i-button type="primary" v-on:click="OpenAddDialog()">添加</i-button>
        <i-button v-on:click="RefreshCache()">刷新服务缓存</i-button>
    </fieldset>
    <table>
        <thead>
            <tr>
                <th>ID</th>
                <th>主项目</th>
                <th>辅项目</th>
                <th>提醒文案</th>
                <th>文案中高亮部分</th>
                <th>状态</th>
                <th>添加时间</th>
                <th>最近更改时间</th>
                <th>操作</th>
                <th>操作日志</th>
            </tr>
        </thead>
        <tbody>
            <tr v-if="loading">
                <td colspan="20"><img src="~/Images/loading.gif" /></td>
            </tr>
            <tr v-else-if="searchResult != []" v-for="(value,index) in searchResult">
                <td>{{value.PKID}}</td>
                <td>{{value.MainPackageName}}</td>
                <td>{{value.RelatedPackageNames}}</td>
                <td style="word-break:break-all;">{{value.Content}}</td>
                <td>{{value.Highlights}}</td>
                <td v-if="value.IsEnabled==true"><Tag color="blue">启用</Tag></td>
                <td v-else><Tag color="red">禁用</Tag></td>
                <td>{{value.CreateDateTime | DatePrase}}</td>
                <td>{{value.LastUpdateDateTime | DatePrase}}</td>
                <td>
                    <i-button style="width:60px" v-on:click="OpenEditDialog(value)">编辑</i-button>
                    <i-button type="error" style="width:60px;margin-left:5px" v-on:click="Delete(value)">删除</i-button>
                </td>
                <td>
                    <i-button style="width:60px" v-on:click="WatchHistroy(value)">查看</i-button>
                </td>
            </tr>
            <tr v-else>
                <td colspan="20">根据筛选条件未能查询到相关结果</td>
            </tr>
        </tbody>
    </table>
    <Page style="margin:10px;" :total="pager.totalCount" :current.sync="pager.pageIndex" :page-size="pager.pageSize" show-total></Page>

    @*添加或编辑的对话框*@
    <Modal v-model="addOrEditDialog.show" :mask-closable="false" width="40%">
        <p slot="header" style="color:#f60;text-align:center">
            <span v-if="addOrEditDialog.type==='Add'">添加</span>
            <span v-if="addOrEditDialog.type==='Edit'">编辑</span>
        </p>
        <div style="text-align:center">
            <table>
                <tr>
                    <th>主项目:</th>
                    <td v-if="addOrEditDialog.type==='Add'">
                        <i-select style="width:95%" v-model="model.MainPackageType" filterable>
                            <i-option v-for="packageType in packageTypes" :value="packageType.Type" :key="packageType.Type">{{packageType.Name}}</i-option>
                        </i-select>
                    </td>
                    <td v-else-if="addOrEditDialog.type==='Edit'">
                        {{model.MainPackageName}}
                    </td>
                </tr>
                <tr>
                    <th>辅项目:</th>
                    <td>
                        <i-select style="width:95%;" v-model="model.RelatedPackageTypeList" multiple filterable>
                            <i-option v-for="packageType in packageTypes" :value="packageType.Type" :key="packageType.Type">{{packageType.Name}}</i-option>
                        </i-select>
                    </td>
                </tr>
                <tr>
                    <th>提醒文案:</th>
                    <td>
                        <i-input style="width:95%;" type="textarea" v-model="model.Content"></i-input>
                    </td>
                </tr>
                <tr>
                    <th>文案中高亮部分<p style="color:red">( ; 分号分隔 )</p></th>
                    <td>
                        <i-input style="width:95%;" type="textarea" v-model="model.Highlights"></i-input>
                    </td>
                </tr>
                <tr>
                    <th>
                        状态:
                    </th>
                    <td>
                        <i-Switch size="large" v-model="model.IsEnabled">
                            <span slot="open">启用</span>
                            <span slot="close">禁用</span>
                        </i-Switch>
                    </td>
                </tr>
            </table>
        </div>
        <div slot="footer">
            <i-button v-if="addOrEditDialog.type==='Add'" v-on:click="Add()">保存</i-button>
            <i-button v-else-if="addOrEditDialog.type==='Edit'" v-on:click="Edit()">保存</i-button>
            <i-button v-on:click="addOrEditDialog.show=false">取消</i-button>
        </div>
    </Modal>

    @*查看日志对话框*@
    <Modal v-model="showLog.show" :mask-closable="false" width="40%">
        <p slot="header">
            <span>操作历史</span>
        </p>
        <div style="text-align:center">
            <table>
                <thead>
                    <tr>
                        <th>操作人</th>
                        <th>时间</th>
                        <th>操作</th>
                        <th>查看前后值对比</th>
                    </tr>
                </thead>
                <tbody>
                    <tr v-show="showLog.logs.length>0" v-for="log in showLog.logs">
                        <td>{{log.OperateUser}}</td>
                        <td>{{log.CreateTime | DatePrase}}</td>
                        <td>{{log.Remarks}}</td>
                        <td>
                            <i-button style="width:60px" v-on:click="WatchLogDetail(log.OldValue,log.NewValue)">查看</i-button>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
        <div slot="footer">
            <i-button v-on:click="showLog.show=false">关闭</i-button>
        </div>
    </Modal>

    @*日志详情对话框*@
    <Modal v-model="showLog.detail.show" :mask-closable="false" width="40%">
        <p slot="header">
            <span>日志详情</span>
        </p>
        <div style="text-align:center">
            <table>
                <thead>
                    <tr>
                        <th>列名</th>
                        <th>操作前值</th>
                        <th>操作后值</th>
                    </tr>
                </thead>
                <tbody>
                    <tr v-show="showLog.detail.logProperty.length>0" v-for="property in showLog.detail.logProperty">
                        <td>{{property}}</td>
                        <td v-if="showLog.detail.oldValue!=null">{{showLog.detail.oldValue[property]}}</td>
                        <td v-else></td>
                        <td v-if="showLog.detail.newValue!=null">{{showLog.detail.newValue[property]}}</td>
                        <td v-else></td>
                    </tr>
                </tbody>
            </table>
        </div>
        <div slot="footer">
            <i-button v-on:click="showLog.detail.show=false">关闭</i-button>
        </div>
    </Modal>
</div>

<script src="~/Scripts/vue.min.js"></script>
<script src="~/Scripts/iview/iview.min.js"></script>
<script type="text/javascript">
    function DatePrase(value) {
        if (value) {
            return eval('new ' + eval(value).source).Format('yyyy-MM-dd hh:mm:ss');
        }
    };
    Vue.filter('DatePrase', DatePrase);
    var vue = new Vue({
        el: "#vue",
        data: {
            packageTypes: [],
            searchData: {
                mainPackageType: ""
            },
            pager: {
                pageIndex: 1,
                pageSize: 20,
                totalCount: 0
            },
            model: {
                PKID: 0,
                MainPackageType: "",
                MainPackageName: "",
                RelatedPackageTypes: "",
                RelatedPackageTypeList: [],
                RelatedPackageNames: "",
                Content: "",
                IsEnabled: false,
                CreateDateTime: "",
                LastUpdateDateTime: "",
                Highlights: ""
            },
            loading: false,
            searchResult: [],
            addOrEditDialog: {
                show: false,
                type: ""
            },
            showLog: {
                show: false,
                logs: [],
                detail: {
                    show: false,
                    oldValue: "",
                    newValue: "",
                    logProperty: []
                }
            }
        },
        created: function () {
            var self = this;
            self.GetAllPackageTypes();
            self.Search(self.pager.pageIndex);
            self.$Message.config({
                top: 50,
                duration: 5,
                closable: false
            });
        },
        watch: {
            "model.MainPackageType": function () {
                var self = this;
                if (self.model.MainPackageType && self.packageTypes && self.packageTypes.length > 0) {
                    var package = self.packageTypes.find(function (item) { return item.Type == self.model.MainPackageType }) || [];
                    self.model.MainPackageName = package.Name || "";
                }
            }
        },
        methods: {
            GetAllPackageTypes: function () {
                var self = this;
                $.post("GetAllBaoYangPackageTypes", function (result) {
                    if (result.Status) {
                        self.packageTypes = result.Data;
                    }
                });
            },
            Search: function (pagerIndex) {
                var self = this;
                self.loading = true;
                self.pager.pageIndex = pagerIndex;
                $.post("SelectConfig", {
                    mainPackageType: self.searchData.mainPackageType, pageIndex: self.pager.pageIndex, pageSize: self.pager.pageSize
                }, function (result) {
                    if (result.Status) {
                        self.searchResult = result.Data;
                        self.pager.totalCount = result.TotalCount;
                    }
                    else {
                        self.$Message.error({
                            content: ("查询失败!" + (result.Msg || "")),
                            duration: 0,
                            closable: true
                        });
                        self.SearchResult = [];
                    }
                    self.loading = false;
                });
            },
            //打开添加对话框
            OpenAddDialog: function (item) {
                var self = this;
                self.model = {
                    PKID: 0,
                    MainPackageType: "",
                    MainPackageName: "",
                    RelatedPackageNames: "",
                    RelatedPackageTypes: [],
                    RelatedPackageTypeList: [],
                    Content: "",
                    Highlights: "",
                    IsEnabled: false
                };
                self.addOrEditDialog.type = "Add";
                self.addOrEditDialog.show = true;
            },
            //打开编辑对话框
            OpenEditDialog: function (item) {
                var self = this;
                self.model = JSON.parse(JSON.stringify(item));
                self.addOrEditDialog.type = "Edit";
                self.addOrEditDialog.show = true;
            },
            //关闭对话框
            CloseAddOrEditDialog: function () {
                var self = this;
                self.addOrEditDialog.show = false;
            },
            //添加配置
            Add: function () {
                var self = this;
                var model = self.model;
                if (!self.CheckConfig(model)) {
                    return;
                }
                if (!confirm("是否确认添加主项目为:" + model.MainPackageName + "的配置 ?")) {
                    return;
                }
                model.RelatedPackageTypes = model.RelatedPackageTypeList.join(",");
                $.post("AddConfig", { model: model }, function (result) {
                    if (result && result.Status) {
                        self.$Message.success("添加成功!" + (result.Msg || ""));
                        self.CloseAddOrEditDialog();
                        setTimeout(function () { self.Search(self.pager.pageIndex) }, 2000);
                    }
                    else {
                        self.$Message.error({
                            content: ("添加失败!" + (result.Msg || "")),
                            duration: 0,
                            closable: true
                        });
                    }
                });
            },
            //编辑配置
            Edit: function () {
                var self = this;
                var model = self.model;
                if (!self.CheckConfig(model)) {
                    return;
                }
                if (!confirm("是否确认更新主项目为:" + model.MainPackageName + "的配置 ?")) {
                    return;
                }
                model.RelatedPackageTypes = model.RelatedPackageTypeList.join(",");
                $.post("UpdateConfig", { model: model }, function (result) {
                    if (result && result.Status) {
                        self.$Message.success("编辑成功!" + (result.Msg || ""));
                        self.CloseAddOrEditDialog();
                        setTimeout(function () { self.Search(self.pager.pageIndex) }, 2000);
                    }
                    else {
                        self.$Message.error({
                            content: ("编辑失败!" + (result.Msg || "")),
                            duration: 0,
                            closable: true
                        });
                    }
                });
            },
            //删除配置
            Delete: function (item) {
                var self = this;
                if (!item || !item.MainPackageType) {
                    return;
                }
                if (!confirm("确认删除主项目为:" + item.MainPackageName + "的配置?")) {
                    return;
                }
                $.post("DeleteConfig",
                    { mainPackageType: item.MainPackageType }, function (result) {
                        if (result && result.Status) {
                            self.$Message.success("删除成功!" + (result.Msg || ""));
                            setTimeout(function () { self.Search(self.pager.pageIndex) }, 2000);
                        }
                        else {
                            self.$Message.error({
                                content: ("删除失败!" + (result.Msg || "")),
                                duration: 0,
                                closable: true
                            });
                        }
                    });
            },
            //查看操作记录
            WatchHistroy: function (item) {
                var self = this;
                if (item && item.MainPackageType) {
                    $.post("GetOprLog", { mainPackageType: item.MainPackageType }, function (result) {
                        if (result && result.Status) {
                            self.showLog.logs = result.Data;
                            self.showLog.show = true;
                        }
                    });
                }
            },
            //查看单条日志详情
            WatchLogDetail: function (oldValue, newValue) {
                var self = this;
                var oldObj = /^\s*$/.test(oldValue) ? null : JSON.parse(oldValue);
                var newObj = /^\s*$/.test(newValue) ? null : JSON.parse(newValue);
                var obj = oldObj || newObj;
                var keys = [];
                for (var property in obj) {
                    if (obj.hasOwnProperty(property)) {
                        keys[keys.length] = property;
                    }
                }
                self.showLog.detail.oldValue = oldObj;
                self.showLog.detail.newValue = newObj;
                self.showLog.detail.logProperty = keys;
                self.showLog.detail.show = true;
            },
            //刷新服务缓存
            RefreshCache: function () {
                var self = this;
                $.post("RefreshCache", {}, function (result) {
                    if (result && result.Status) {
                        self.$Message.info("刷新服务缓存成功!");
                    }
                    else {
                        self.$Message.error({
                            content: "刷新服务缓存失败",
                            duration: 0,
                            closable: true
                        });
                    }
                });
            },
            //添加或编辑 数据校验
            CheckConfig: function (model) {
                var self = this;
                var errorMessage = "";
                if (!model) {
                    errorMessage = "未知的对象";
                }
                else if (!model.MainPackageType) {
                    errorMessage = "请选择主项目";
                }
                else if (!(model.RelatedPackageTypeList && model.RelatedPackageTypeList.length > 0)) {
                    errorMessage = "请选择辅项目";
                }
                else if (!model.Content) {
                    errorMessage = "请输入提醒文案";
                }
                else if (model.RelatedPackageTypeList.indexOf(model.MainPackageType) != -1) {
                    errorMessage = "辅项目中不得包含主项目";
                }
                else if (model.Content.indexOf(";") != -1) {
                    errorMessage = "提醒文案中不得包含;号";
                }
                else if (model.Content.indexOf("；") != -1) {
                    errorMessage = "提醒文案中不得包含；号";
                }
                if (!errorMessage) {
                    model.Highlights = model.Highlights.replace("；", ";");
                }
                if (errorMessage) {
                    this.$Message.warning({
                        content: errorMessage,
                        duration: 0,
                        closable: true
                    });
                    return false;
                }
                else {
                    return true;
                }
            }
        }
    });
</script>
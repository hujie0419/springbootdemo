<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".generated.cs" #>

<# var projectName = Path.GetFileNameWithoutExtension(Host.TemplateFile); #>
using System;
using System.Collections.Generic;
using System.ServiceModel;
using System.Threading.Tasks;
using System.Data;
using Tuhu.Models;
using Tuhu.Service.<#= projectName #>.Models;
//不要在<#= projectName #>.generated.cs文件里加任何代码，此文件内容为自动生成。需要加接口请在<#= projectName #>.tt或<#= projectName #>.cs中添加
namespace Tuhu.Service.<#= projectName #>
{
<#//Tuple.Create("方法名（可重载）",
//	"方法参数（含参数类型）",
//	"方法参数（不含参数类型）",
//	"返回值类型",
//	"XML注释",
//	"Action名称。如果方法有重载时，此值必须不能相同，其中最多一个为null；方法没有重载时为null")
	 var services = new []{
		Tuple.Create("Activity", @"/// <summary>活动服务</summary>", new []{
			Tuple.Create("SelectTireActivity","string vehicleId, string tireSize","vehicleId,tireSize","TireActivityModel",@"/// <summary>查询轮胎活动</summary>/// <returns></returns>", (string)null),
        })
   };
   foreach (var service in services)
   { #>
	<#= service.Item2 #>
    [ServiceContract(Namespace = TuhuSerivce.TuhuSerivceNamespace)]
    public interface I<#= service.Item1 #>Service
    {
    <# foreach (var method in service.Item3)
       { #>
	<#= method.Item5 #>
        [OperationContract(Action = TuhuSerivce.TuhuSerivceNamespace + "/<#= projectName #>/<#= service.Item1 #>/<#= method.Item6 ?? method.Item1 #>", ReplyAction = TuhuSerivce.TuhuSerivceNamespace + "/<#= projectName #>/<#= service.Item1 #>/<#= method.Item6 ?? method.Item1 #>Response")]
        Task<OperationResult<<#= method.Item4 #>>> <#= method.Item1 #>Async(<#= method.Item2 #>);
	<# } #>}

	<#= service.Item2 #>
    [ServiceContract(Namespace = TuhuSerivce.TuhuSerivceNamespace)]
    public interface I<#= service.Item1 #>Client : I<#= service.Item1 #>Service, ITuhuServiceClient
    {
    <# foreach (var method in service.Item3)
       { #>
	<#= method.Item5 #>
        [OperationContract(Action = TuhuSerivce.TuhuSerivceNamespace + "/<#= projectName #>/<#= service.Item1 #>/<#= method.Item6 ?? method.Item1 #>", ReplyAction = TuhuSerivce.TuhuSerivceNamespace + "/<#= projectName #>/<#= service.Item1 #>/<#= method.Item6 ?? method.Item1 #>Response")]
        OperationResult<<#= method.Item4 #>> <#= method.Item1 #>(<#= method.Item2 #>);
	<# } #>}

	<#= service.Item2 #>
	public partial class <#= service.Item1 #>Client : TuhuServiceClient<I<#= service.Item1 #>Client>, I<#= service.Item1 #>Client
    {
    <# foreach (var method in service.Item3)
       { #>
	<#= method.Item5 #>
        public OperationResult<<#= method.Item4 #>> <#= method.Item1 #>(<#= method.Item2 #>) => Invoke(_ => _.<#= method.Item1 #>(<#= method.Item3 #>));

	<#= method.Item5 #>
        public Task<OperationResult<<#= method.Item4 #>>> <#= method.Item1 #>Async(<#= method.Item2 #>) => InvokeAsync(_ => _.<#= method.Item1 #>Async(<#= method.Item3 #>));
	<# } #>}
<# } #>
}

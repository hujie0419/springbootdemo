@{
    ViewBag.Title = "银行活动组配置";
}
@section head{
    <link href="~/css/bankMRActivity.css" rel="stylesheet" type="text/css" />
    <link href="~/Content/iview/iview.css" rel="stylesheet" />
    <style type="text/css">
        .vertical-group .floatCenter {
            margin-left: 30%;
        }
    </style>
}

<div id="div" v-cloak>
    <h2>银行活动组配置</h2>
    <h2>
        <i-button v-on:click="AddBankActivityGroupNameConfig()">创建</i-button>
    </h2>
    <br />
    <div>
        <table class="tableContainer">
            <thead>
                <tr>
                    <th>PKID</th>
                    <th>分组GroupId</th>
                    <th>分组名称</th>
                    <th>创建时间</th>
                    <th>操作</th>
                </tr>
            </thead>
            <tr v-for="item in BankActivityGroupConfigList">
                <td>{{item.PKID}}</td>
                <td>{{item.GroupId}}</td>
                <td>{{item.GroupName}}</td>
                <td>{{item.CreatedDateTime | formatDate}}</td>
                <td>
                    <button v-on:click="JumpUpsertBankActivityGroupConfig(item)">查看</button>
                    <button v-on:click="EditBankActivityGroupConfig(item)">编辑</button>
                </td>
            </tr>
        </table>
    </div>
    <div style="float: right;">
        <Page :total="pager.total" :current="pager.currentPage" :page-size="pager.size" show-total v-on:on-change="changePage"></Page>
    </div>
    <div id="BankActivityGroupNameConfigDialog">
        <div class="content">
            <modal v-if="Dialog.ShowBankActivityGroupNameConfigDialog" v-on:close="Dialog.ShowBankActivityGroupNameConfigDialog=false">
                <h3 slot="header">创建分组</h3>
                <div slot="body" class="vertical-group">
                    <div>
                        <input type="text" v-model="BankActivityGroupConfig.GroupName" />
                    </div>
                </div>
                <div slot="footer">
                    <button class="modal-default-button" v-on:click="UpsertBankActivityGroupConfig()" v-bind:disabled="DisableUpsertButton">确认</button>
                    <button class="modal-default-button" v-on:click="CloseBankActivityGroupNameConfigDialog()">取消</button>
                </div>
            </modal>
        </div>
    </div>
</div>
<script type="text/x-template" id="modal-template">
    <transition name="modal">
        <div class="modal-mask">
            <div class="modal-wrapper">
                <div class="modal-container">
                    <div class="modal-header">
                        <slot name="header"></slot>
                    </div>
                    <div class="modal-body">
                        <slot name="body"></slot>
                    </div>
                    <div class="modal-footer">
                        <slot name="footer">
                            <button class="modal-default-button" v-on:click="">OK</button>
                        </slot>
                    </div>
                </div>
            </div>
        </div>
    </transition>
</script>
<script type="text/x-template" id="region-template">
    <div style="display:inline-block">
        <select v-on:change="ChangeProvince()" v-model="CurrentProvinceId">
            <option v-for="item in AllProvince" v-bind:value="item.RegionId">{{ item.RegionName }}</option>
        </select>
        <label><input style="display:inline-block" type="button" value="收起" /></label>
        <br />
        <label v-for="city in Citys">
            <span><input type="checkbox" name="cityName" v-bind:value="city.RegionId" />{{city.RegionName}}</span>
        </label>
    </div>
</script>
@section scripts{
    <script src="~/Scripts/vue.min.js"></script>
    <script src="~/Scripts/iview/iview.min.js"></script>
    <script type="text/javascript" src="~/Scripts/dateJs/vue-date.min.js"></script>
    <script type="text/javascript">
        function formatDate(value) {
            if (value) {
                var time = value instanceof Date ? value : eval('new ' + value.toString().replace(/\//g, ""));
                var year = time.getFullYear();
                var day = time.getDate();
                var month = time.getMonth() + 1;
                var hours = time.getHours();
                var minutes = time.getMinutes();
                var seconds = time.getSeconds();
                var func = function(value, number) {
                    var str = value.toString();
                    while (str.length < number) {
                        str = "0" + str;
                    }
                    return str;
                }
                if (year == 1) {
                    return "";
                } else {
                    return func(year, 4) + '-' + func(month, 2) + '-' + func(day, 2) + ' '
                }
            }
        }

        Vue.filter('formatDate', formatDate);
        Vue.component('modal',
            {
                template: '#modal-template'
            });


        Vue.component("region",
            {
                template: '#region-template',
                data: function() {
                    return {
                        AllProvince: [],
                        Citys: [],
                        CurrentProvinceId: 0,
                    }
                },
                created: function() {
                    this.Load();
                },
                methods: {
                    Load: function() {
                        var self = this;
                        self.GetAllProvince();
                    }
                }
            })
        var vue = new Vue({
            el: "#div",
            data: {
                BankActivityGroupConfigList: [],
                ActivityName: '',
                pager: {
                    total: 0,
                    pages: 0,
                    currentPage: 1,
                    size: 10,
                    inputPage: 0
                },
                FilterCondition: {
                    cooperateId: 0,
                    activityName: "",
                    serviceId: "",
                    settleMentMethod: ""
                },
                BankActivityGroupConfig: {
                    GroupId: "",
                    GroupName: "",
                    RegionId: "",
                    ActivityId: ""
                },
                Dialog: {
                    ShowBankActivityGroupNameConfigDialog: false,
                    ShowBankActivityGroupConfigDialog: false,
                    pager: {
                        total: 0,
                        pages: 0,
                        currentPage: 1,
                        size: 5,
                        inputPage: 0
                    },
                },
                ProvinceCityList: [],
                ProvinceCity: {
                    ProvinceId: 0,
                    CityId: 0,
                    CityList: []
                },
                AllMrCooperateUserConfigs: [],
                AllVipService: [],
                VerifyTypes: [],
                SearchVerifyTypes: [],
                SearchVerifyType: '',
                SearchVerifyTypeName: '',
                SignleBankMRActivityUser: [],
                AllProvince: [],
                ProvinceIds: [],
                CityIds: [],
                DisableUpsertButton: false,
                LimitDateType: "",
                DaysOfMonth: [],
                DaysOfWeek: [],
                ShowDaysOfMonth: false,
                ShowDaysOfWeek: false,
                IsChooseAllLimitDate: "checked",
                CurrentActivity: "",
                ExcelFile: "",
                ActivityBannerImage: "",
                AdCenterImage: "",
                AdBottomImage: "",
                ImportRoundType: "",
                ActivityDisable: false,
                IsOnLine: true,
                ImportBankMRActivityUsersRecords: [],
                IsUpload: false,
            },
            components: { datepicker },
            created: function() {
                this.load();
            },
            watch: {
                "ProvinceCityList": function() {
                    console.log(this.ProvinceCityList);
                },
                "ProvinceCity.ProvinceId": function() {
                    this.GetRegionByRegionId(this.ProvinceCity.ProvinceId);
                },
                "LimitDateType": function() {
                    var self = this;
                    switch (self.LimitDateType) {
                    case "month":
                        self.ShowDaysOfMonth = true;
                        self.ShowDaysOfWeek = false;
                        break;
                    case "week":
                        self.ShowDaysOfMonth = false;
                        self.ShowDaysOfWeek = true;
                        break;
                    }
                }
            },
            methods: {
                load: function(callback) {
                    var self = this;
                    self.GetBankActivityGroupConfigs(self.pager.currentPage, self.pager.size);
                    //self.GetAllProvince();
                },
                delayLoad: function(callback) {
                    var self = this;
                    setTimeout(function() { self.load(callback); }, 2000);
                },
                SearchBankActivityGroupConfigs: function() {
                    var self = this;
                    self.pager.currentPage = 1;
                    self.GetBankActivityGroupConfigs(self.pager.currentPage,
                        self.pager.size,
                        self.FilterCondition.cooperateId,
                        self.FilterCondition.activityName,
                        self.FilterCondition.serviceId,
                        self.FilterCondition.settleMentMethod);
                },
                AddBankActivityGroupNameConfig: function(activity) {
                    var self = this;
                    self.BankActivityGroupConfig.GroupName = "";
                    self.Dialog.ShowBankActivityGroupNameConfigDialog = true;
                },
                EditBankActivityGroupConfig: function(activity) {
                    var self = this;
                    if (activity) {
                        self.BankActivityGroupConfig = JSON.parse(JSON.stringify(activity));
                    } else {
                        self.BankActivityGroupConfig.GroupName = "";
                    }
                    self.Dialog.ShowBankActivityGroupNameConfigDialog = true;
                },
                CloseBankActivityGroupNameConfigDialog: function() {
                    var self = this;
                    self.Dialog.ShowBankActivityGroupNameConfigDialog = false;
                },
                CloseBankActivityGroupConfigDialog: function() {
                    var self = this;
                    self.Dialog.ShowBankActivityGroupConfigDialog = false;
                },
                GetBankActivityGroupConfigs: function(pageIndex,
                    pageSize,
                    cooperateId,
                    activityName,
                    serviceId,
                    settleMentMethod) {
                    var self = this;
                    $.get("GetBankActivityGroupConfigs",
                        {
                            pageIndex: pageIndex,
                            pageSize: pageSize,
                            cooperateId: cooperateId,
                            activityName: activityName,
                            serviceId: serviceId,
                            settleMentMethod: settleMentMethod
                        },
                        function(result) {
                            self.BankActivityGroupConfigList = result.result;
                            self.pager.total = result.total;
                        })
                },

                UpsertBankActivityGroupConfig: function() {
                    var self = this;
                    var config = self.BankActivityGroupConfig;
                    if (!config.GroupName) {
                        alert("信息不完善");
                        return;
                    }

                    if (!self.DisableUpsertButton) {
                        self.DisableUpsertButton = true;
                        $.post("CheckDupBankActivityGroupName",
                            {
                                groupName: self.BankActivityGroupConfig.GroupName
                            },
                            function(result) {
                                if (result != null && result.IsSuccess) {
                                    self.UpsertBankActivityGroupName();
                                } else {
                                    alert("该组名以存在");
                                    self.DisableUpsertButton = false;
                                }
                            }
                        )
                    }
                },
                UpsertBankActivityGroupName: function() {
                    var self = this;
                    $.post("UpsertBankActivityGroupName",
                        {
                            groupId: self.BankActivityGroupConfig.GroupId,
                            groupName: self.BankActivityGroupConfig.GroupName
                        },
                        function(result) {
                            self.DisableUpsertButton = false;
                            if (result) {
                                self.Dialog.ShowBankActivityGroupConfigDialog = false;
                                self.Dialog.ShowBankActivityGroupNameConfigDialog = false;
                                self.load();
                            } else {
                                alert("失败");
                            }
                        })
                },
                DeleteBankActivityGroupConfig: function(id) {
                    if (id <= 0) {
                        alert("错误！");
                        return;
                    } else if (confirm("确定要删除吗？")) {
                        $.post("DeleteBankActivityGroupConfig",
                            { pkid: id },
                            function(result) {
                                if (result.IsSuccess) {
                                    window.location.reload();
                                }
                            }
                        )
                    }
                },
                JumpUpsertBankActivityGroupConfig: function(item) {
                    window.open(
                        "UpsertBankActivityGroupConfig?groupId=" + item.GroupId + "&groupName=" + item.GroupName);
                },
                download: function(e) {
                    console.log(e);
                    window.location.href = "GetImportBankMRActivityUsers?batchCode=" + e;
                },

                GetAllProvince: function() {
                    var self = this;
                    $.get("GetAllProvince",
                        function(data) {
                            self.AllProvince = data;
                        });
                },
                GetRegionByRegionId: function(regionId) {
                    var self = this;
                    $.get("GetRegionByRegionId",
                        { regionId: regionId },
                        function(data) {
                            self.ProvinceCity.CityList = data.ChildRegions;
                        });
                },

                UploadFileChange: function(event) {
                    var self = this;
                    var input = event.target;
                    var file = input.files[0];
                    if (file) {
                        self.ExcelFile = file;
                    } else self.ExcelFile = null;
                },


                changePage(page) {
                    var _this = this;
                    _this.pager.currentPage = page;
                    _this.GetBankActivityGroupConfigs(_this.pager.currentPage,
                        _this.pager.size,
                        _this.FilterCondition.cooperateId,
                        _this.FilterCondition.activityName,
                        _this.FilterCondition.serviceId,
                        _this.FilterCondition.settleMentMethod)
                },
                dialogchangePage(page) {
                    var _this = this;
                    _this.Dialog.pager.currentPage = page;
                    $.post("GetImportBankMRActivityUsersRecords",
                        {
                            activityId: _this.CurrentActivity.ActivityId,
                            pageIndex: _this.Dialog.pager.currentPage,
                            pageSize: _this.Dialog.pager.size
                        },
                        function(data) {
                            if (data != null && data.Result != null && data.Result.length > 0) {
                                _this.ImportBankMRActivityUsersRecords = data.Result;
                                _this.Dialog.pager.total = data.Total;
                            } else {
                                _this.ImportBankMRActivityUsersRecords = [];
                            }
                        });
                }
            }
        })

    </script>
}
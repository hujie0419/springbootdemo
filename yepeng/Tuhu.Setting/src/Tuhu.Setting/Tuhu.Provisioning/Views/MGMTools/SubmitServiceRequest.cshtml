
@model Dictionary<string,List<string>>
@{
    ViewBag.Title = "服务UT工具";
}

<!DOCTYPE html>

<script src="/Scripts/jquery.jsonview.js"></script>
<link href="/Styles/jquery.jsonview.css" rel="stylesheet" />
<style>
    html, body {
        height: 100%;
        color: #333;
        font-weight: 300;
        font-size: 12px;
    }

    .floor-table {
        margin-top: 20px;
        display: inline-block;
        width: 100%;
        background-color: #444;
    }

    .form-label {
        color: #d0d0d0;
    }

    .form-control {
        background: #333;
        border: 1px solid #444;
        color: #999;
    }

    input, textarea {
        width: 100%;
        box-sizing: border-box;
        border-radius: 3px;
        padding: 5px;
        margin-top: 10px;
    }
</style>

<div class="floor-table">
    <div style="padding: 15px;float: left;width:45%">
        <div style="display:block;">
            <div style="float:inherit">
                <h4 style="font-size: 20px;">
                    <a>服务UT测试工具，谨慎使用</a>
                </h4>
            </div>
            <div>
                <form style="display:block" method="post" name="SubEs" enctype="multipart/form-data">
                    <div style="display:block;">
                        @Html.DropDownList("clientList", Model.SelectMany(p => p.Value.Select(pp => new SelectListItem() { Text = pp, Value = p.Key + "|" + pp })).OrderBy(x => x.Value));
                    </div>
                    <div style="display:block;">
                        @Html.TextBox("methodName", "", new { placeholder = "输入方法名" })
                    </div>
                    @*<div style="display:block;">
                        @Html.DropDownList("22", (ViewBag.MethodList as Dictionary<string, List<string>>).SelectMany(p => p.Value.Select(pp => new SelectListItem() { Text = pp, Value = p.Key + "|" + pp })));
                    </div>*@
                    <div style="display:block;">
                        @Html.TextBox("host", "", new { placeholder = "修改域名/主机名 wcf.tuhu.work;ut:YW-CC-16W01" })
                    </div>
                    <div style="display:block;">
                        @Html.TextBox("point", "", new { placeholder = "修改端口 9011" })
                    </div>
                    <div>
                        @Html.TextArea("paraJson", "", new { placeholder = @"输入请求参数  格式为Josn对象   { 参数名1:{属性1:属性1值,属性2:属性2值} , 参数名2:值2  ...}", Style = "min-height:200px" })
                    </div>
                    <div>
                        <input type="submit" style="width:100px" value="发送请求" />
                    </div>
                </form>
            </div>
        </div>
    </div>
    <div style="padding: 15px;float: left;width:45%;box-sizing: border-box;">
        <div style="display:block;">
            <h4 style="font-size: 16px;">
                <a>Response</a>
            </h4>
            <div id="responseResult" style="background-color:white;height:500px;overflow :auto">
                @ViewBag.Result
            </div>
            <input type="button" id="jsFormat" onclick="FormatRequest()" style="width:100px" value="格式化" />
        </div>
    </div>
</div>
<script>

    function format(txt, compress/*是否为压缩模式*/) {/* 格式化JSON源码(对象转换为JSON文本) */
        var indentChar = '    ';
        if (/^\s*$/.test(txt)) {
            alert('数据为空,无法格式化! ');
            return;
        }
        try { var data = eval('(' + txt + ')'); }
        catch (e) {
            alert('数据源语法错误,格式化失败! 错误信息: ' + e.description, 'err');
            return;
        };
        var draw = [], last = false, This = this, line = compress ? '' : '\n', nodeCount = 0, maxDepth = 0;

        var notify = function (name, value, isLast, indent/*缩进*/, formObj) {
            nodeCount++;/*节点计数*/
            for (var i = 0, tab = ''; i < indent; i++) tab += indentChar;/* 缩进HTML */
            tab = compress ? '' : tab;/*压缩模式忽略缩进*/
            maxDepth = ++indent;/*缩进递增并记录*/
            if (value && value.constructor == Array) {/*处理数组*/
                draw.push(tab + (formObj ? ('"' + name + '":') : '') + '[' + line);/*缩进'[' 然后换行*/
                for (var i = 0; i < value.length; i++)
                    notify(i, value[i], i == value.length - 1, indent, false);
                draw.push(tab + ']' + (isLast ? line : (',' + line)));/*缩进']'换行,若非尾元素则添加逗号*/
            } else if (value && typeof value == 'object') {/*处理对象*/
                draw.push(tab + (formObj ? ('"' + name + '":') : '') + '{' + line);/*缩进'{' 然后换行*/
                var len = 0, i = 0;
                for (var key in value) len++;
                for (var key in value) notify(key, value[key], ++i == len, indent, true);
                draw.push(tab + '}' + (isLast ? line : (',' + line)));/*缩进'}'换行,若非尾元素则添加逗号*/
            } else {
                if (typeof value == 'string') value = '"' + value + '"';
                draw.push(tab + (formObj ? ('"' + name + '":') : '') + value + (isLast ? '' : ',') + line);
            };
        };
        var isLast = true, indent = 0;
        notify('', data, isLast, indent, false);
        return draw.join('');
    }

    function FormatRequest() {
        var area = $("#responseResult")[0];
        var result = format(area.innerHTML);
        area.innerHTML = result;
        $("#responseResult").JSONView(area.innerHTML);
    }

</script>

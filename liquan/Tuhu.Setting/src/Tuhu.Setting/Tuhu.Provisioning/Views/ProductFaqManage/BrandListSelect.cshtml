
@{
    ViewBag.Title = "ListForm";
    Layout = "~/Views/Shared/_Form.cshtml";
    <link href="~/Scripts/zTree/css/zTreeStyle/zTreeStyle.css" rel="stylesheet" />
}
@*<input type="button" value="保存" onclick="ConfirmBrandCheckeds();" />*@
<div style="width: 800px;">
    <ul id="TreeB_Categorys" class="ztree" style="width: 200px; border: 2px solid #808080; background-color: #ccc; float: left; margin-top: 100px"></ul>
    <div style="width: 550px; float: left; margin: 100px 0 0 30px;">
        <table style="border-collapse: collapse;">
            <tr>
                <td style="border: 1px solid #e8eef4;" align="center">
                    <label><input  id="CP_Brand_Checked" type="checkbox">全部品牌</label>
                </td>
            </tr>
            <tr>
                <td style="border: 1px solid #e8eef4;" id="Tree_B_Brands_Page_table_td">
                    @{
                        foreach (var item in (List<Tuhu.Provisioning.DataAccess.Entity.FilterConditionModel>) ViewBag.CP_BrandList)
                        {
                            <label style="display: inline-block; width: 150px; margin: 2px 0;">
                                <input class="cpBrand" value="@item.Name" type="checkbox" >@item.Name
                            </label>
                        }
                    }
                </td>
            </tr>
        </table>
    </div>
</div>
<link rel="stylesheet" href="~/Scripts/multiple/multiple-select.css" type="text/css" />
<script type="text/javascript" src="~/Scripts/multiple/multiple-select.js"></script>
<script src="~/Scripts/zTree/js/jquery.ztree.core-3.5.min.js" type="text/javascript"></script>
<script src="~/Scripts/zTree/js/jquery.ztree.excheck-3.5.min.js" type="text/javascript"></script>
<script type="text/javascript">
    Array.prototype.indexOf = function (val) {
        for (var i = 0; i < this.length; i++) {
            if (this[i] == val) return i;
        }
        return -1;
    };
    Array.prototype.remove = function (val) {
        var index = this.indexOf(val);
        if (index > -1) {
            this.splice(index, 1);
        }
    };
    var _B_CategorysCategorysJson = @Html.Raw(ViewBag.B_Categorys ?? "[]"),
        _B_BrandsItems=[],
        _B_CategorysParnets = [];
    var TreeManageConfig = function(jsonData, defaultElement, isCheckParent) {
        var self = this,
            getZTreeObj = $.fn.zTree.getZTreeObj(defaultElement);
        this.setting = {
                check:
                    { enable: true, chkStyle: "radio", radioType: "all" },
                data: {
                    simpleData: {
                        enable: true
                    }
                },
                callback: {
                    onCheck: function() {
                        var ids = [];
                        //if (defaultElement.indexOf("TreeB_Categorys") >= 0) {
                        //    $(self.getItems(isCheckParent)).each(function (i, item) {
                        //        ids.push(item.id);
                        //    });
                        //    $("#B_Categorys").val(ids.join(","));
                        //}
                        //else {
                        //_B_CategorysParnets = [];

                        var dataSource = self.getItems(isCheckParent);

                        RecursiveQueryForGetParents(dataSource[0]);

                        LoadBrandCheckeds(dataSource[0].NodeNo);

                        //_B_CategorysParnets.reverse(); //反序,修改会影响编品牌结果

                        console.log("onCheck.dataSource => ", dataSource);
                        console.log("onCheck._B_CategorysParnets =>", _B_CategorysParnets);
                        //}
                    }
                }
            },
            this.zTreeJson = jsonData || [],
            this.zTreeInit = function() {
                $.fn.zTree.init($("#" + defaultElement), this.setting, this.zTreeJson);
            },
            this.getItems = function(isCheckBox) {
                var treeObj = $.fn.zTree.getZTreeObj(defaultElement);
                var nodes = new Array();
                var sNodes = treeObj.getCheckedNodes(true);
                if (isCheckBox) {
                    $.each(sNodes,
                        function() {
                            var node = $(this);
                            if (node[0].check_Child_State == 2 || node[0].check_Child_State == -1)
                                nodes.push(node[0]);
                        });
                    return nodes;
                } else {
                    return sNodes;
                }
            },
            this.expandAll = function(isExpandAll) {
                $.fn.zTree.getZTreeObj(defaultElement).expandAll(isExpandAll || false);
            },
            this.checkAllTree = function(ischecks) {
                $.fn.zTree.getZTreeObj(defaultElement).checkAllNodes(ischecks || false);
                self.setting.callback.onCheck();
            }
    };

    function RecursiveQueryForGetParents(node) {
        //递归获取当前选中项所有父节点
        if ((node.parentTId || "").length <= 0) {
            _B_CategorysParnets.push(node.name + ":" + node.id);
            return;
        } else {
            
            var elm = node.getParentNode().name + ":" + node.getParentNode().id;
            _B_CategorysParnets.remove(elm);
            //for (var i = 0; i < _B_CategorysParnets.length; i++) {
            //    if (elm == _B_CategorysParnets[i])
            //    {
            //        _B_CategorysParnets.slice(i-1, 1);
            //    }

            //}
            _B_CategorysParnets.push(node.name + ":" + node.id);
            //return this.RecursiveQueryForGetParents(node.getParentNode());
        }
    }

    function LoadBrandCheckeds(id) {
        $("#Tree_B_Brands_Page_table_td").html("").load('/ProductFaqManage/BrandsCheckBoxListControl?categorys=' + id);
    }

    new TreeManageConfig(_B_CategorysCategorysJson, "TreeB_Categorys", false).zTreeInit();

    //function CP_Brand_Checked(obj) {
    //    var hasChk = $(obj).is(':checked');
    //        $(".fffff4").prop("checked", hasChk);
    //}

    $(document).on('click', '#CP_Brand_Checked',
        function ()
        {
            var hasChk = $(this).is(':checked');
            $(".cpBrand").prop("checked", hasChk);
        });
    function ConfirmBrandCheckeds(iframe) {
        $.modalAlert("可继续勾选品类如不需要请点关闭", 'success');
        var _tempGetCategory = _B_CategorysParnets[_B_CategorysParnets.length - 1].split(':')[1] || "",
            //    _tempGetCategoryNmae = _B_CategorysParnets[_B_CategorysParnets.length - 1].split(':')[0] || "",
            _tempCategoryName = JSON.stringify(_B_CategorysParnets[_B_CategorysParnets.length - 1]); //此处转换为了解决引用类型的坑
        //for (var i = _B_BrandsItems.length - 1; i >= 0; i--) {
        //    if (parseInt(_B_BrandsItems[i].Category || 0) == _tempGetCategory) {
        //        _B_BrandsItems.splice(i, 1);
        //    }
        //}
        _B_BrandsItems.push({
            "CategoryName": JSON.parse(_tempCategoryName || ""),
            "Category": _tempGetCategory,
            "Brands":
                //$(".fffff4").map(function() {
                //        if ($(this).is(":checked")) return $(this).val();
                //    }).get().join(',')
                $(":checkbox").map(function () {
                    if ($(this).is(":checked")) return $(this).val();
                }).get().join(',')
        });

        //Set_B_Brands(_B_BrandsItems);

        console.log(JSON.stringify(_B_BrandsItems));
        return JSON.stringify(_B_BrandsItems);
    };

    function Set_B_Brands(data) {
        if (data.length > 0) {
            var $Show_B_Brands_Table = $("#Show_B_Brands_Table > tbody");
            $Show_B_Brands_Table.html("");

            for (var i = 0; i < data.length; i++) {
                $Show_B_Brands_Table.append($("#B_Brands_TableTemplate").html()
                    .replace(/{CategoryName}/ig,
                        data[i].CategoryName.map(function(e) {
                            return e.split(':')[0];
                        }).join('<span style="color:red;"> -> </span>')
                    ).replace(/{Brands}/ig,
                        data[i].Brands.split(',').map(function(e) {
                            return "<span style='display:inline-block;border:1px solid red;margin-bottom:2px;'>" +
                                e +
                                "</span>";
                        }).join(' ')
                    ).replace(/{BrandsToId}/ig,
                        data[i].Brands
                    ).replace(/{CategoryNameToId}/ig,
                        data[i].CategoryName.map(function(e) {
                            return e.split(':')[1];
                        }).join('.')
                    ).replace(/{Category}/ig, data[i].Category));
            }
        }
    }

    function Select(iframe) {
        return _B_CategorysParnets;
    }
</script>

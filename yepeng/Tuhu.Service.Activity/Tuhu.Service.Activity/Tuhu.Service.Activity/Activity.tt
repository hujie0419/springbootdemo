<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".generated.cs" #>

<# var projectName = Path.GetFileNameWithoutExtension(Host.TemplateFile); #>
using System;
using System.Collections.Generic;
using System.ServiceModel;
using System.Threading.Tasks;
using System.Data;
using Tuhu.Models;
using Tuhu.Service.<#= projectName #>.Enum;
using Tuhu.Service.<#= projectName #>.Models;
using Tuhu.Service.<#= projectName #>.Models.Requests;
using CreateOrderRequest= Tuhu.Service.Order.Request.CreateOrderRequest;
using CreateOrderResult = Tuhu.Service.<#= projectName #>.Models.CreateOrderResult;
using Tuhu.Service.<#= projectName #>.Models.Response;
//不要在<#= projectName #>.generated.cs文件里加任何代码，此文件内容为自动生成。需要加接口请在<#= projectName #>.tt或<#= projectName #>.cs中添加
namespace Tuhu.Service.<#= projectName #>
{
<#//Tuple.Create("方法名（可重载）",
//	"方法参数（含参数类型）",
//	"方法参数（不含参数类型）",
//	"返回值类型",
//	"XML注释",
//	"Action名称。如果方法有重载时，此值必须不能相同，其中最多一个为null；方法没有重载时为null")
	 var services = new []{
         Tuple.Create("BigBrand",@"///<summary>大翻牌</summary>",new [] {
            Tuple.Create("GetBigBrand", 
             "string keyValue",
             "keyValue",
             "BigBrandRewardListModel",
             @"///<summary>获取大翻牌数据信息</summary>///<returns></returns>",(string)null),
             Tuple.Create("UpdateBigBrand", 
             "string keyValue",
             "keyValue",
             "bool",
             @"///<summary>更新大翻牌数据信息</summary>///<returns></returns>",(string)null),
             Tuple.Create("GetPacket", 
             "Guid userId, string deviceId, string Channal, string hashKey,string phone,string refer,string openId=default(string)",
             "userId,deviceId,Channal,hashKey,phone,refer,openId",
             "BigBrandResponse",
             @"///<summary>获取抽奖结果</summary>///<returns></returns>",(string)null),
             Tuple.Create("ShareAddOne", 
             "Guid userId, string deviceId, string Channal, string hashKey,string phone,string refer,string openId=default(string),int chanceType=2",
             "userId,deviceId,Channal,hashKey,phone,refer,openId,chanceType",
             "bool",
             @"///<summary>分享追加抽奖次数</summary>///<returns></returns>",(string)null),
             Tuple.Create("SelectCanPacker", 
             "Guid userId, string deviceId, string Channal, string hashKey,string phone,string refer,string openId=default(string)",
             "userId,deviceId,Channal,hashKey,phone,refer,openId",
             "BigBrandCanResponse",
             @"///<summary>抽奖播报</summary>///<returns></returns>",(string)null),
             Tuple.Create("SelectPack", 
             "string hashKey",
             "hashKey",
             "string",
             @"///<summary>获取大翻盘抽奖信息</summary>///<returns></returns>",(string)null),
             Tuple.Create("UpdateBigBrandRealLog", 
             "string hashKey,Guid userId,string address, Guid tip,string phone,string deviceId,string Channal,string userName",
             "hashKey,userId,address,tip,phone,deviceId,Channal,userName",
             "BigBrandRealResponse",
             @"///<summary>更新实物奖励地址</summary>///<returns></returns>",(string)null),
             Tuple.Create("IsNULLBigBrandRealByAddress", 
             "string hashKey,Guid userId,string phone,string deviceId,string Channal",
             "hashKey,userId,phone,deviceId,Channal",
             "IEnumerable<BigBrandRealLogModel>",
             @"///<summary>查询实物奖励的更新地址是否有未填写</summary>///<returns></returns>",(string)null),
             Tuple.Create("ShareAddByOrder", 
             "Guid userId, string deviceId, string Channal, string hashKey,string phone,string refer,int times",
             "userId,deviceId,Channal,hashKey,phone,refer,times",
             "bool",
             @"///<summary>订单状态增加抽奖次数</summary>///<returns></returns>",(string)null),
             Tuple.Create("AddBigBrandTimes", 
             "Guid userId, string deviceId, string Channal, string hashKey,string phone,string refer,int times",
             "userId,deviceId,Channal,hashKey,phone,refer,times",
             "bool",
             @"///<summary>给大翻盘添加抽奖次数</summary>///<returns></returns>",(string)null),
             Tuple.Create("GetAnswerPacket", 
             "Guid userId, string deviceId, string Channal, string hashKey,string phone,string refer",
             "userId,deviceId,Channal,hashKey,phone,refer",
             "BigBrandResponse",
             @"///<summary>问答抽奖返回结果</summary>///<returns></returns>",(string)null),
             Tuple.Create("SetAnswerRes", 
             "Tuhu.Service.Activity.Models.Requests.QuestionAnsRequestModel request",
             "request",
             "Tuhu.Service.Activity.Models.Response.QuestionAnsResponse",
             @"///<summary>问答设置问题答案</summary>///<returns></returns>",(string)null),
             Tuple.Create("GetQuestionList", 
             "Guid userId, string hashKey ",
             "userId,hashKey",
             "List<Tuhu.Service.Activity.Models.BigBrandQuesList>",
             @"///<summary>获取问题列表</summary>///<returns></returns>",(string)null),
             Tuple.Create("UpdateQuestionInfoList", 
             "",
             "",
             "bool",
             @"///<summary>刷新问答题库</summary>///<returns></returns>",(string)null),
             Tuple.Create("GetFightGroupsPacketsList", 
             "Guid? fightGroupsIdentity,Guid userId",
             "fightGroupsIdentity,userId",
             "Tuhu.Service.Activity.Models.Response.FightGroupPacketListResponse",
             @"///<summary>获取分享红包组列表</summary>///<returns></returns>",(string)null),
             Tuple.Create("InsertFightGroupsPacket", 
             "Guid userId",
             "userId",
             "Tuhu.Service.Activity.Models.Response.FightGroupPacketListResponse",
             @"///<summary>新增分享红包组</summary>///<returns></returns>",(string)null),
             Tuple.Create("UpdateFightGroupsPacketByUserId", 
             "Tuhu.Service.Activity.Models.Requests.FightGroupsPacketsUpdateRequest request",
             "request",
             "bool",
             @"///<summary>更新分享组红包中的用户</summary>///<returns></returns>",(string)null),
             Tuple.Create("CreateFightGroupsPacketByPromotion", 
             "Guid fightGroupsIdentity",
             "fightGroupsIdentity",
             "Tuhu.Service.Activity.Models.Response.FightGroupsPacketsProvideResponse",
             @"///<summary>发放优惠券红包</summary>///<returns></returns>",(string)null),
             Tuple.Create("SelectShareList", 
             "Guid userId,string hashKey,int chanceType",
             "userId,hashKey,chanceType",
             "List<BigBrandRewardLogModel>",
             @"///<summary>获取错题分享的日志列表 chanceType:1.中奖纪录，2.分享纪录，3.答题答错分享纪录</summary>///<returns></returns>",(string)null),
         } ),
	    Tuple.Create("FlashSale", @"/// <summary>限时抢购</summary>", new []{
			Tuple.Create("UpdateFlashSaleDataToCouchBaseByActivityID",
			"Guid activityID",
			"activityID",
			"bool",
			@"/// <summary>更新限时抢购内容到缓存</summary>
        /// <returns></returns>", (string)null),
		    Tuple.Create("SelectFlashSaleDataByActivityID",
			"Guid activityID",
			"activityID",
			"FlashSaleModel",
			@"/// <summary>根据活动ID查询活动详情</summary>
        /// <returns></returns>", (string)null),
		    Tuple.Create("GetFlashSaleList",
			"Guid[] activityIDs",
			"activityIDs",
			"List<FlashSaleModel>",
			@"/// <summary>获取限时抢购缓存的内容</summary>
        /// <returns></returns>", (string)null),
				    Tuple.Create("SelectSecondKillTodayData",
			"int activityType, DateTime? scheduleDate=null,bool needProducts=true",
			"activityType,scheduleDate,needProducts",
			"IEnumerable<FlashSaleModel>",
			@"/// <summary>查今天天天秒杀当天数据</summary>
        /// <returns></returns>", (string)null),
		   Tuple.Create("DeleteFlashSaleRecords",
			"int orderId",
			"orderId",
			"int",
			@"/// <summary>订单取消，减掉限时抢购的数量</summary>
        /// <returns></returns>", (string)null),
           Tuple.Create("GetUserReminderInfo","EveryDaySeckillUserInfo model","model", "UserReminderInfo",
			@"/// <summary>获取天天秒杀用户提醒信息</summary>/// <returns>null</returns>", (string)null),
              Tuple.Create("InsertEveryDaySeckillUserInfo","EveryDaySeckillUserInfo model","model", "InsertEveryDaySeckillUserInfoResponse",
			@"/// <summary>插入天天秒杀用户信息</summary>/// <returns>null</returns>", (string)null),
			 Tuple.Create("CheckFlashSaleProductBuyLimit",
			"CheckFlashSaleProductRequest request",
			"request",
			"IEnumerable<FlashSaleProductBuyLimitModel>",
			@"/// <summary>校验限时抢购产品是否被限购</summary>
        /// <returns></returns>", (string)null),
			 Tuple.Create("GetUserCanBuyFlashSaleItemCount",
			"Guid userId,Guid activityId,string pid",
			"userId,activityId,pid",
			"FlashSaleProductCanBuyCountModel",
			@"/// <summary>获取用户还可以购买此活动产品几件</summary>
        /// <returns></returns>", (string)null),
		 Tuple.Create("CheckCanBuyFlashSaleOrder",
			"FlashSaleOrderRequest request",
			"request",
			"FlashSaleOrderResponse",
			@"/// <summary>校验是否可购买这个限时抢购订单</summary>
        /// <returns></returns>", (string)null) ,
         Tuple.Create("FetchProductDetailForFlashSale","string productId, string variantId, string activityId,string channel, string userId,string productGroupId=null,int buyQty=1","productId,variantId,activityId,channel,userId,productGroupId,buyQty","FlashSaleProductDetailModel",@"/// <summary>/// 查询产品详情页限时抢购详情/// </summary>///  <returns></returns>",(string)null),     
         Tuple.Create("DecrementCounter", "int orderId", "orderId", "bool", @"///<summary>减少计数器</summary>", (string)null),   
         Tuple.Create("OrderCancerMaintenanceFlashSaleData", "int orderId", "orderId", "bool", @"///<summary>取消订单时维护数据</summary>", (string)null),  
         Tuple.Create("RefreshFlashSaleHashCount", "List<string> activtyids ,bool isAllRefresh", "activtyids,isAllRefresh", "bool", @"///<summary>刷新限购商品计数器缓存</summary>", (string)null),  
         Tuple.Create("GetFlashSaleWithoutProductsList", "List<Guid> activtyids", "activtyids", "List<FlashSaleModel>", @"///<summary>只查询活动配置信息</summary>", (string)null),       
         Tuple.Create("FetchProductDetailDisountInfo", "DiscountActivtyProductRequest request", "request", "FlashSaleProductDetailModel", @"///<summary>查询详情页打折信息</summary>", (string)null), 
         Tuple.Create("GetUserCreateFlashOrderCountCache", "OrderCountCacheRequest request", "request", "OrderCountResponse", @"///<summary>查询用户下单是维护的限购计数器</summary>", (string)null),  
         Tuple.Create("SetUserCreateFlashOrderCountCache", "OrderCountCacheRequest request", "request", "OrderCountResponse", @"///<summary>设置用户下单是维护的限购计数器</summary>", (string)null),
         Tuple.Create("SelectFlashSaleWrongCache", "", "", "List<FlashSaleWrongCacheResponse>", @"///<summary>获取缓存里数据不准确的数据</summary>", (string)null),
         Tuple.Create("OrderCreateMaintenanceFlashSaleDbData", "FlashSaleOrderRequest flashSale", "flashSale", "bool", @"///<summary>用户创建订单时候维护销售数据</summary>", (string)null),
         Tuple.Create("UpdateConfigSaleoutQuantityFromLog", "UpdateConfigSaleoutQuantityRequest request", "request", "bool", @"///<summary>从日志表里更新销量到配置表</summary>", (string)null),
         Tuple.Create("RefreshSeckillDefaultDataBySchedule", "string schedule", "schedule", "bool", @"///<summary>按照场次刷新秒杀默认数据</summary>", (string)null),
         Tuple.Create("GetSeckillScheduleInfo", "List<string> pids, DateTime sSchedule, DateTime eSchedule", "pids,sSchedule,eSchedule", "Dictionary<string, List<SeckilScheduleInfoRespnose>>", @"///<summary>获取传入时间段内的秒杀活动</summary>", (string)null),
		  }),
		    Tuple.Create("Activity", @"/// <summary>活动服务</summary>", new []{
			Tuple.Create("SelectTireActivity","string vehicleId, string tireSize","vehicleId,tireSize","TireActivityModel",@"/// <summary>查询轮胎活动</summary>/// <returns></returns>", (string)null),
			Tuple.Create("SelectTireActivityNew","TireActivityRequest request","request","TireActivityModel",@"/// <summary>查询轮胎活动</summary>/// <returns></returns>", (string)null),
			Tuple.Create("SelectTireChangedActivity","TireActivityRequest request","request","string",@"/// <summary>查询轮胎跳转活动</summary>/// <returns></returns>", (string)null),
            Tuple.Create("SelectTireActivityPids","Guid activityId","activityId","IEnumerable<string>",@"/// <summary>查询轮胎活动的产品</summary>/// <returns></returns>", (string)null),
			Tuple.Create("UpdateTireActivityCache","string vehicleId, string tireSize","vehicleId,tireSize","bool",@"/// <summary>更新轮胎活动缓存</summary>/// <returns></returns>", (string)null),
			Tuple.Create("UpdateActivityPidsCache","Guid activityId","activityId","bool",@"/// <summary>更新轮胎活动的产品</summary>/// <returns></returns>", (string)null),
			Tuple.Create("SelectVehicleAaptTires","VehicleAdaptTireRequestModel request","request","List<VehicleAdaptTireTireSizeDetailModel>",@"/// <summary>车型适配轮胎</summary>/// <returns></returns>", (string)null),
		    Tuple.Create("SelectCarTagCouponConfigs","","","IEnumerable<CarTagCouponConfigModel>",@"///<summary>优惠券信息</summary>///<returns></returns>",(string)null),
			Tuple.Create("SelectVehicleAaptBaoyangs","string vehicleId","vehicleId","IEnumerable<VehicleAdaptBaoyangModel>",@"///<summary>车型适配保养</summary>///<returns></returns>",(string)null),
			Tuple.Create("SelectVehicleAdaptChepins","string vehicleId","vehicleId","IDictionary<string, IEnumerable<VehicleAdaptChepinDetailModel>>",@"///<summary>车型适配车品信息</summary>///<returns></returns>",(string)null),
			Tuple.Create("SelectVehicleSortedTireSizes","string vehicleId","vehicleId","IEnumerable<VehicleSortedTireSizeModel>",@"///<summary>获取排序后的轮胎规格</summary>///<returns></returns>",(string)null),
			Tuple.Create("GetGuidAndInsertUserShareInfo","string pid, Guid batchGuid, Guid userId","pid,batchGuid,userId","Guid",@"///<summary> 插入用户分享信息并返回guid</summary>///<returns></returns>",(string)null),
			Tuple.Create("GetActivityUserShareInfo","Guid shareId","shareId","ActivityUserShareInfoModel",@"///<summary> 根据Guid取出写入表中的数据</summary>///<returns></returns>",(string)null),
			Tuple.Create("SelectPromotionPacketHistory","Guid userId, Guid luckyWheel","userId,luckyWheel","IEnumerable<PromotionPacketHistoryModel>",@"///<summary> 根据活动ID查询用户领取次数</summary>///<returns></returns>",(string)null),
			Tuple.Create("GetGuidAndInsertUserForShare","Guid configGuid, Guid userId","configGuid,userId","Guid",@"///<summary>根据配置表id跟用户id取出生成的新id，分享赚钱功能</summary>///<returns></returns>",(string)null),
			Tuple.Create("FetchRecommendGetGiftConfig","Guid? number=null,Guid? userId=null","number,userId","RecommendGetGiftConfigModel",@"///<summary>获取配置表的一条数据，分享赚钱功能</summary>///<returns></returns>",(string)null),
			Tuple.Create("SelectPacketByUsers","","","DataTable",@"///<summary>查询礼包领取</summary>///<returns></returns>",(string)null),
		    Tuple.Create("SelectTireActivityByActivityId","Guid activityId","activityId","TireActivityModel",@"///<summary>查询轮胎活动</summary>///<returns></returns>",(string)null),
			Tuple.Create("GetRegionActivityPageUrl", "string city,string activityId", "city,activityId", "RegionActivityPageModel",
			@"/// <summary>获取地区活动页的url</summary>/// <returns>活动期间根据地区取得活动页的链接，否则返回是否是未开始或者过期</returns>", (string)null),
			Tuple.Create("GetRegionVehicleIdActivityUrl", "Guid activityId, int regionId, string vehicleId", "activityId, regionId, vehicleId", "ResultModel<string>", "/// <summary>根据活动Id和地区Id或者车型Id获取目标活动地址</summary>\n[Obsolete(\"请使用GetRegionVehicleIdActivityUrlNewAsync\")]", (string)null),
            Tuple.Create("GetRegionVehicleIdActivityUrlNew", "Guid activityId, int regionId, string vehicleId, string activityChannel", "activityId, regionId, vehicleId, activityChannel", "ResultModel<string>", @"/// <summary>根据活动Id,活动渠道和地区Id或者车型Id获取目标活动地址</summary>/// <returns></returns>", (string)null),
			Tuple.Create("RefreshRegionVehicleIdActivityUrlCache", "Guid activityId", "activityId", "bool", @"/// <summary>清除缓存</summary>/// <returns></returns>", (string)null),
 			Tuple.Create("GetActivityConfigForDownloadApp","int id","id","DownloadApp",@"///<summary>落地页查询</summary>///<returns></returns>",(string)null),
			Tuple.Create("CleanActivityConfigForDownloadAppCache","int id","id","bool",@"///<summary>清除落地页数据缓存</summary>///<returns></returns>",(string)null),
			Tuple.Create("CancelActivityOrderOfSamePaymentAccount","int orderId, string paymentAccount","orderId,paymentAccount","int",
            @"///<summary>取消相同支付账户的订单 -1:失败 1:取消成功 2:无取消订单</summary>///<returns></returns>",(string)null),
            Tuple.Create("GetActivePageListModel","ActivtyPageRequest request","request","ActivePageListModel",@"///<summary>获取活动页数据</summary>///<returns></returns>",(string)null),
            Tuple.Create("GetLuckyWheelUserlotteryCount","Guid userid, Guid userGroup,string hashkey=null","userid,userGroup,hashkey","int",@"///<summary>获取大翻盘用户可翻盘数量</summary>///<returns></returns>",(string)null),
            Tuple.Create("UpdateLuckyWheelUserlotteryCount","Guid userid, Guid userGroup,string hashkey=null","userid,userGroup,hashkey","int",@"///<summary>更新大翻盘用户可翻盘数量</summary>///<returns></returns>",(string)null),
            Tuple.Create("RefreshActivePageListModelCache","ActivtyPageRequest request","request","bool",@"///<summary>刷新活动页数据</summary>///<returns></returns>",(string)null),
            Tuple.Create("RefreshLuckWheelCache","string id","id","bool",@"///<summary>刷新大翻盘数据数据</summary>///<returns></returns>",(string)null),
            Tuple.Create("VerificationByTires","VerificationTiresRequestModel requestModel",
			  "requestModel",
			  "VerificationTiresResponseModel",
			  @"/// <summary>验证轮胎订单是否能购买</summary>
			/// <returns></returns>", (string)null),
            Tuple.Create("InsertTiresOrderRecord","TiresOrderRecordRequestModel requestModel",
			  "requestModel",
			  "bool",
			  @"/// <summary>增加轮胎下单记录</summary>
			/// <returns></returns>", (string)null),
            Tuple.Create("RevokeTiresOrderRecord","int orderId",
			  "orderId",
			  "bool",
			  @"/// <summary>撤销轮胎下单记录</summary>
			/// <returns></returns>", (string)null),
            Tuple.Create("RedisTiresOrderRecordReconStruction","TiresOrderRecordRequestModel requestModel",
			  "requestModel",
			  "bool",
			  @"/// <summary>Redis的轮胎订单记录重建</summary>
			/// <returns></returns>", (string)null),
                Tuple.Create("SelectTiresOrderRecord","TiresOrderRecordRequestModel requestModel",
			  "requestModel",
			  "Dictionary<string, object>",
			  @"/// <summary>RedisAndSql的轮胎订单记录查询</summary>
			/// <returns></returns>", (string)null),
             Tuple.Create("VerificationTiresPromotionRule","VerificationTiresRequestModel requestModel,int ruleId",
			  "requestModel,ruleId",
			  "VerificationTiresResponseModel",
			  @"/// <summary>验证轮胎优惠券是否能领取</summary>
			/// <returns></returns>", (string)null),
            Tuple.Create("GetLuckWheel","string id","id","LuckyWheelModel",@"///<summary>获取大翻盘数据数据</summary>///<returns></returns>",(string)null),
            Tuple.Create("SelectShareActivityProductById","string ProductId,string BatchGuid=null","ProductId,BatchGuid","ShareProductModel",@"///<summary> 分享赚钱 </summary>",(string)null),
            Tuple.Create("SelectBaoYangActivitySetting","string activityId","activityId","BaoYangActivitySetting",@"///<summary>保养活动</summary>///<returns></returns>",(string)null),
            Tuple.Create("SelectCouponActivityConfig","string activityNum, int type","activityNum,type","CouponActivityConfigModel",@"///<summary></summary>///<returns></returns>",(string)null),
            Tuple.Create("SelectActivityTypeByActivityIds","List<Guid> activityIds","activityIds","IEnumerable<ActivityTypeModel>",@"///<summary>获取活动类型</summary>///<returns></returns>",(string)null),
            Tuple.Create("GetActivityBuildWithSelKey", "string keyword", "keyword", "ActivityBuild", @"///<summary>根据搜索词获取活动配置</summary>", (string)null),
            Tuple.Create("RecordActivityTypeLog", "ActivityTypeRequest request", "request", "bool", @"///<summary>记录活动类型</summary>", (string)null),
            Tuple.Create("UpdateBaoYangActivityConfig", "Guid activityId", "activityId", "bool", @"///<summary>更新保养活动配置</summary>", (string)null),
            Tuple.Create("GetFixedPriceActivityStatus", "Guid activityId, Guid userId, int regionId", "activityId, userId, regionId", "FixedPriceActivityStatusResult", @"///<summary>获取保养活动状态</summary>", (string)null),
            Tuple.Create("UpdateBaoYangPurchaseCount", "Guid activityId", "activityId", "bool", @"///<summary>重置活动计数器</summary>", (string)null),
            Tuple.Create("GetFixedPriceActivityRound", "Guid activityId", "activityId", "FixedPriceActivityRoundResponse", @"///<summary>根据activityId获取活动配置</summary>", (string)null),
            Tuple.Create("FetchRegionTiresActivity", "FlashSaleTiresActivityRequest request", "request", "TiresActivityResponse", @"///<summary>根据activityId和RegionId获取活动配置</summary>", (string)null),
            Tuple.Create("RefreshRegionTiresActivityCache", "Guid activityId, int regionId", "activityId, regionId", "bool", @"///<summary>刷新轮胎活动缓存</summary>", (string)null),
            Tuple.Create("RecordActivityProductUserRemindLog", "ActivityProductUserRemindRequest request", "request", "bool", @"///<summary>记录用户点击活动开始提醒</summary>", (string)null),
            Tuple.Create("InsertRebateApplyRecord", "RebateApplyRequest request", "request", "bool", @"///<summary>添加返现申请记录</summary>", (string)null),
            Tuple.Create("InsertOrUpdateActivityPageWhiteListRecords", "List<ActivityPageWhiteListRequest> requests", "requests", "bool", @"///<summary>初始化白名单数据或者后面个别用户白名单状态调整使用</summary>", (string)null),
            Tuple.Create("GetActivityPageWhiteListByUserId", "Guid userId", "userId", "bool", @"///<summary>根据Userid判断是否是白名单用户</summary>", (string)null),
            Tuple.Create("PutUserRewardApplication", "UserRewardApplicationRequest request", "request", "UserRewardApplicationResponse", @"///<summary>记录途虎轮胎节用户申请信息接口</summary>", (string)null),   
	        Tuple.Create("InsertRebateApplyRecordNew", "RebateApplyRequest request", "request", "ResultModel<bool>", @"///<summary>添加返现申请记录</summary>", (string)null),
            Tuple.Create("PutApplyCompensateRecord", "ApplyCompensateRequest request", "request", "bool", @"///<summary>途虎贵就赔申请记录</summary>", (string)null),
            Tuple.Create("GetActivtyValidityResponses", "ActivtyValidityRequest request", "request", "List<ActivtyValidityResponse>", @"///<summary>批量活动有效性验证接口</summary>", (string)null),
            Tuple.Create("GetVipCardSaleConfigDetails", "string activityId", "activityId", "List<VipCardSaleConfigDetailModel>", @"///<summary>获取预付卡场次信息</summary>", (string)null),
            Tuple.Create("VipCardCheckStock", "List<string> batchIds", "batchIds", "Dictionary<string, bool>", @"///<summary>check购买的批次是否还有剩余库存</summary>", (string)null),
            Tuple.Create("PutVipCardRecord", "VipCardRecordRequest request", "request", "bool", @"///<summary>创建订单时记录卡信息</summary>", (string)null),
            Tuple.Create("BindVipCard", "int orderId", "orderId", "bool", @"///<summary>支付成功时调用绑卡</summary>", (string)null),
            Tuple.Create("SelectRebateApplyPageConfig", "", "", "RebateApplyPageConfig", @"///<summary>获取返现申请页面配置</summary>", (string)null), 
            Tuple.Create("InsertRebateApplyRecordV2", "RebateApplyRequest request", "request", "ResultModel<bool>", @"///<summary>申请返现</summary>", (string)null),
            Tuple.Create("SelectRebateApplyByOpenId", "string openId", "openId", "List<RebateApplyResponse>", @"///<summary>获取用户所有返现申请信息</summary>", (string)null),
	        Tuple.Create("ModifyVipCardRecordByOrderId", "int orderId", "orderId", "bool", @"///<summary>取消订单的时候更新db跟缓存中的数据</summary>", (string)null),
            Tuple.Create("GetWorldCup2018Activity", "", " ", "ActivityResponse", @"///<summary>获取2018世界杯的活动对象和积分规则信息</summary>", (string)null),
            Tuple.Create("GetCouponCountByUserId", "Guid userId, long activityId", "userId,activityId", "int", @"///<summary>通过用户ID获取兑换券数量接口</summary>", (string)null),
            Tuple.Create("SearchCouponRank", "long activityId, int pageIndex = 1, int pageSize = 20", " activityId,pageIndex,pageSize ", "PagedModel<ActivityCouponRankResponse>", @"///<summary>返回活动兑换券排行排名</summary>", (string)null),
            Tuple.Create("GetUserCouponRank", "Guid userId, long activityId", " userId,activityId ", "ActivityCouponRankResponse", @"///<summary>返回用户的兑换券排名情况</summary>", (string)null),
            Tuple.Create("SearchPrizeList", "SearchPrizeListRequest searchPrizeListRequest", " searchPrizeListRequest ", "PagedModel<ActivityPrizeResponse>", @"///<summary>兑换物列表</summary>", (string)null),
            Tuple.Create("UserRedeemPrizes", "Guid userId, long prizeId,long activityId", " userId,prizeId,activityId ", "bool", @"///<summary>用户兑换奖品 异常代码：-1 系统异常（请重试） , -2 兑换卡不足  -3 库存不足  -4 已经下架   -5 已经兑换   -6 兑换时间已经截止不能兑换</summary>", (string)null),
            Tuple.Create("SearchPrizeOrderDetailListByUserId", "Guid userId, long activityId, int pageIndex = 1, int pageSize = 20", " userId,activityId,pageIndex,pageSize ", "PagedModel<ActivityPrizeOrderDetailResponse>", @"///<summary>用户已兑换商品列表</summary>", (string)null),
            Tuple.Create("SearchQuestion", " Guid userId , long activityId", " userId,activityId ", "IEnumerable<Models.Response.Question>", @"///<summary>今日竞猜题目</summary>", (string)null),
            Tuple.Create("SubmitQuestionAnswer", "SubmitQuestionAnswerRequest submitQuestionAnswerRequest", " submitQuestionAnswerRequest ", "bool", @"///<summary>提交用户竞猜</summary>", (string)null),
            Tuple.Create("SearchQuestionAnswerHistoryByUserId", "SearchQuestionAnswerHistoryRequest searchQuestionAnswerHistoryRequest", " searchQuestionAnswerHistoryRequest ", "PagedModel<QuestionUserAnswerHistoryResponse>", @"///<summary>返回用户答题历史</summary>", (string)null),
            Tuple.Create("GetVictoryInfo", "Guid userId, long activityId", " userId,activityId ", "ActivityVictoryInfoResponse", @"///<summary>返回用户胜利次数和胜利称号</summary>", (string)null),
            Tuple.Create("ActivityShare", "ActivityShareDetailRequest shareDetailRequest", " shareDetailRequest ", "bool", @"///<summary>活动分享赠送积分  异常：   -77 活动未开始  -2 今日已经分享   -1 系统异常</summary>", (string)null),
            Tuple.Create("ActivityTodayAlreadyShare", "Guid userId, long activityId", " userId, activityId", "bool", @"///<summary>今日是否已经分享了 true = 今日已经分享</summary>", (string)null),
            Tuple.Create("GetOrSetActivityPageSortedPids", "SortedPidsRequest request", "request", "List<string>", @"///<summary>用来获取或者刷新排序好的车型适配商品</summary>", (string)null),
            Tuple.Create("ModifyActivityCoupon", "Guid userId, long activityId, int couponCount , string couponName,DateTime? modifyDateTime = null", " userId, activityId,couponCount,couponName,modifyDateTime", "long", @"///<summary>修改或者增加用户兑换券 并且增加日志  返回主键</summary>", (string)null),
            Tuple.Create("RefreshActivityQuestionCache", "long activityId", " activityId", "bool", @"///<summary>刷新活动题目  缓存</summary>", (string)null),
            Tuple.Create("RefreshActivityPrizeCache", "long activityId", " activityId", "bool", @"///<summary>刷新活动兑换物  缓存</summary>", (string)null),
<<<<<<< HEAD
            Tuple.Create("SubmitQuestionUserAnswer", "SubmitActivityQuestionUserAnswerRequest request", " request", "SubmitActivityQuestionUserAnswerResponse", @"///<summary>保存用户答题数据到数据库</summary>", (string)null),
            Tuple.Create("ModifyQuestionUserAnswerResult", "ModifyQuestionUserAnswerResultRequest request", " request", "ModifyQuestionUserAnswerResultResponse", @"///<summary>更新用户答题结果状态</summary>", (string)null),
=======
            Tuple.Create("GetActivityModelsPaged", "int pageIndex,int pageSize", " pageIndex,pageSize", "Tuple<IEnumerable<ActivityNewModel>, int>", @"///<summary>获取活动列表</summary>", (string)null),
            Tuple.Create("GetActivityModelByActivityId", "Guid activityId", "activityId", "ActivityNewModel", @"///<summary>根据活动Id获取活动</summary>", (string)null),
            Tuple.Create("InsertActivityModel", "ActivityNewModel activityModel", "activityModel", "int", @"///<summary>创建活动返回主键</summary>", (string)null),
            Tuple.Create("UpdateActivityModel", "ActivityNewModel activityModel", "activityModel", "int", @"///<summary>更新活动</summary>", (string)null),
            Tuple.Create("DeleteActivityModelByActivityId", "Guid activityId", "activityId", "bool", @"///<summary>删除活动</summary>", (string)null),
            Tuple.Create("InsertUserActivityModel", "UserApplyActivityModel userActivityModel", "userActivityModel", "bool", @"///<summary>用户报名</summary>", (string)null),
            Tuple.Create("UpdateUserActivityStatusByPKID", "UserApplyActivityModel userActivityModel", "userActivityModel", "bool", @"///<summary>审核用户报名活动</summary>", (string)null),
            Tuple.Create("GetUserApplyActivityModelsPaged", "Guid activityId, AuditStatus auditStatus, int pageIndex, int pageSize", "activityId,auditStatus,pageIndex,pageSize", "Tuple<IEnumerable<UserApplyActivityModel>, int>", @"///<summary>分页获取用户报名列表</summary>", (string)null),
            Tuple.Create("GetActivityApplyUserCountByActivityId", "Guid activityId", "activityId", "int", @"///<summary>根据活动id获取报名人员数量</summary>", (string)null),
            Tuple.Create("GetActivityApplyUserPassCountByActivityId", "Guid activityId", "activityId", "int", @"///<summary>根据活动id获取报名人员审核通过数量</summary>", (string)null),
            Tuple.Create("GetUserApplyActivityByPKID", "int pkid", "pkid", "UserApplyActivityModel", @"///<summary>根据pkid获取报名人员</summary>", (string)null),
            Tuple.Create("DeleteUserApplyActivityModelByPKID", "int pkid", "pkid", "bool", @"///<summary>删除用户报名</summary>", (string)null),
            Tuple.Create("CheckUserApplyActivityInfoIsExist", "Guid activityId,string mobile, string carNum, string driverNum", "activityId,mobile,carNum,driverNum", "bool", @"///<summary>检查用户报名活动手机号、车牌号、驾驶证号是否重复</summary>", (string)null),
            Tuple.Create("RefreshActivityModelByActivityIdCache", "Guid activityId", "activityId", "bool", @"///<summary>设置活动缓存</summary>", (string)null),
            Tuple.Create("RemoveActivityModelByActivityIdCache", "Guid activityId", "activityId", "bool", @"///<summary>移除活动缓存</summary>", (string)null),
            Tuple.Create("AddUserApplyActivitySortedSetCache", "UserApplyActivityModel userApplyActivityModel", "userApplyActivityModel", "bool", @"///<summary>添加用户报名活动SortedSetCache</summary>", (string)null),
            Tuple.Create("RemoveOneUserApplyActivitySortedSetCache", "UserApplyActivityModel userApplyActivityModel", "userApplyActivityModel", "bool", @"///<summary>删除一个用户报名活动SortedSetCache</summary>", (string)null),
            Tuple.Create("GetUserApplyActivityRangeByScore", "", "", "IEnumerable<UserApplyActivityModel>", @"///<summary>获取用户报名活动集合</summary>", (string)null),
            Tuple.Create("GetUserApplyActivitySortedSetLength", "", "", "long", @"///<summary>获取用户报名活动添加用户报名活动SortedSetLength</summary>", (string)null),
>>>>>>> cef10ecfe95a62dbe27086896d29d0abab5da3d4
		  })
          ,Tuple.Create("Cache",@"/// <summary>缓存相关</summary>",new []{ 
            Tuple.Create("RemoveRedisCacheKey","string cacheName,string cacheKey,string prefixKey=null","cacheName,cacheKey,prefixKey","bool",@"///<summary>清理活动站点的Redis缓存</summary>",(string)null),
            Tuple.Create("RefreshVipCardCacheByActivityId","string activityId","activityId","bool",@"///<summary>根据活动id重新setredis缓存</summary>",(string)null),
            Tuple.Create("RefreshRedisCachePrefixForCommon","RefreshCachePrefixRequest request","request","bool",@"///<summary>刷新缓存前缀接口</summary>",(string)null),
          })
		  ,Tuple.Create("Article", @"/// <summary>文章相相关</summary>", new []{
			Tuple.Create("SelectDiscoveryHome", "string userId,PagerModel page,int version", "userId,page,version", "PagedModel<HomePageTimeLineRequestModel>", @"///<summary>查询关注列表数据</summary>", (string)null)
			}),
           Tuple.Create("ZeroActivity", @"/// <summary>途虎众测</summary>", new []{
			Tuple.Create("SelectUnfinishedZeroActivitiesForHomepage", "bool resetCache=false", "resetCache", "IEnumerable<ZeroActivityModel>", @"///<summary>获取未结束的首页众测活动列表</summary>", (string)null),
            Tuple.Create("SelectFinishedZeroActivitiesForHomepage", "int pageNumber", "pageNumber", "IEnumerable<ZeroActivityModel>", @"///<summary>获取已结束的首页众测活动列表</summary>", (string)null),
            Tuple.Create("FetchZeroActivityDetail", "int period", "period", "ZeroActivityDetailModel", @"///<summary>获取众测活动详情</summary>", (string)null),
            Tuple.Create("HasZeroActivityApplicationSubmitted", "Guid userId, int period", "userId, period", "bool", @"///<summary>判断用户是否已提交众测申请</summary>", (string)null),
            Tuple.Create("HasZeroActivityReminderSubmitted", "Guid userId, int period", "userId, period", "bool", @"///<summary>判断用户是否已触发开测提醒</summary>", (string)null),
            Tuple.Create("SelectChosenUserReports", "int period", "period", "IEnumerable<SelectedTestReport>", @"///<summary>获取特定众测活动的入选用户与其报告概况</summary>", (string)null),
            Tuple.Create("FetchTestReportDetail", "int commentId", "commentId", "SelectedTestReportDetail", @"///<summary>获取众测报告详情</summary>", (string)null),
            Tuple.Create("SelectMyApplications", "Guid userId, int applicationStatus", "userId, applicationStatus", "IEnumerable<MyZeroActivityApplications>", @"///<summary>获取用户众测活动申请,申请状态（0:申请中，1:申请成功，-1：申请失败）</summary>", (string)null),
            Tuple.Create("SubmitZeroActivityApplication", "ZeroActivityRequest requestModel", "requestModel", "bool", @"///<summary>提交众测申请</summary>", (string)null),
            Tuple.Create("SubmitZeroActivityReminder", "Guid userId, int period", "userId, period", "bool", @"///<summary>触发开测提醒</summary>", (string)null),
            Tuple.Create("RefreshZeroActivityCache", "", "", "bool", @"///<summary>刷新众测活动配置缓存</summary>", (string)null),
			}),
            Tuple.Create("FlashSaleCreateOrder", @"/// <summary>限购下单相关</summary>", new []{
			Tuple.Create("FlashSaleCreateOrder", "CreateOrderRequest request", "request", "CreateOrderResult", @"///<summary>限购下单</summary>", (string)null),
            Tuple.Create("FetchActivityProductPrice","ActivityPriceRequest request","request","IEnumerable<ActivityPriceModel>",
                @"/// <summary> 获得活动价 </summary>",(string)null),
			}),
        Tuple.Create("ShareBargain", @"/// <summary>分享砍价相关</summary>", new []{
            Tuple.Create("GetBargainPaoductList","GetBargainproductListRequest request","request","PagedModel<BargainProductModel>",
                @"/// <summary> 获取砍价商品列表 </summary>",(string)null),
            Tuple.Create("FetchBargainProductHistory","Guid userId,int activityProductId,string pid","userId,activityProductId,pid","BargainProductHistory",
                @"/// <summary>  获取用户该活动商品下的砍价记录 </summary>",(string)null),
            Tuple.Create("AddBargainAction","Guid idKey,Guid userId,int activityProductId","idKey,userId,activityProductId","BargainResult",
                @"/// <summary> 受邀人进行一次砍价 </summary>",(string)null),
            Tuple.Create("CheckBargainProductStatus","Guid ownerId,int apId,string pid, string deviceId = default(string)","ownerId,apId,pid,deviceId","ShareBargainBaseResult",
                @"/// <summary> 检查此商品是否可购买 </summary>",(string)null),
            Tuple.Create("AddShareBargain","Guid ownerId,int apId,string pid","ownerId,apId,pid","BargainShareResult",
                @"/// <summary> 用户发起砍价分享活动 </summary>",(string)null),
            Tuple.Create("FetchShareBargainInfo","Guid idKey,Guid UserId","idKey,UserId","BargainShareProductModel",
                @"/// <summary> 受邀人获取分享产品信息 </summary>",(string)null),
            Tuple.Create("RefreshShareBargainCache","","","bool",
                @"/// <summary> 刷新缓存 </summary>",(string)null),
            Tuple.Create("GetShareBargainConfig","","","BargainGlobalConfigModel",
                @"/// <summary> 获得分享砍价全局配置 </summary>", (string)null),
            Tuple.Create("SelectBargainProductById","Guid OwnerId, Guid UserId,List<BargainProductItem> ProductItems","OwnerId,UserId,ProductItems","IEnumerable<BargainProductModel>",
                @"/// <summary> 批量获取产品详情页 </summary>", (string)null),
            Tuple.Create("SelectBargainProductItems","Guid UserId,int PageIndex,int PageSize","UserId,PageIndex,PageSize","PagedModel<BargainProductItem>",
                @"/// <summary> 分页获取产品PID和apid </summary>", (string)null),
            Tuple.Create("FetchBargainProductItemByShareId","Guid IdKey","IdKey","BargainProductInfo",
                @"/// <summary> 根据IdKey获取产品PID和apid </summary>", (string)null),
            Tuple.Create("SetShareBargainStatus","Guid IdKey","IdKey","bool",
                @"/// <summary> 设置分享idkey的状态 </summary>",(string)null),
            Tuple.Create("MarkUserReceiveCoupon","Guid ownerId, int apId, string pid, string deviceId = default(string)","ownerId,apId,pid,deviceId","ShareBargainBaseResult",
                @"/// <summary> 砍价流程完成后，用户领取优惠券 </summary>",(string)null),
            Tuple.Create("GetUserBargainCountAtTimerange","Guid ownerId, DateTime beginTime, DateTime endTime","ownerId,beginTime,endTime","int",
                @"/// <summary> 用户砍价次数，在某时间段内 </summary>",(string)null),
            Tuple.Create("GetBargainProductForIndex","","","List<SimpleBargainProduct>",@"/// <summary>首页获取默认的两个砍价商品</summary>",(string)null),
            Tuple.Create("SelectBargainProductList","int pageIndex, int pageSize","pageIndex, pageSize","PagedModel<BargainProductItem>",
                @"/// <summary> 首页获取砍价产品列表 </summary>",(string)null),
            Tuple.Create("SelectBargainHistory","int pageIndex, int pageSize, Guid userId","pageIndex, pageSize, userId","PagedModel<BargainHistoryModel>",
                @"/// <summary> 分页获取用户的砍价记录 </summary>",(string)null),
            Tuple.Create("GetBargsinProductDetail","Guid userId, List<BargainProductItem> productItems","userId, productItems","List<BargainProductNewModel>",
                @"/// <summary> 首页获取砍价商品详情 </summary>",(string)null),
            Tuple.Create("GetSliceShowInfo","int count = 10","count","List<SliceShowInfoModel>",
                @"/// <summary> 获取轮播信息 </summary>",(string)null),
            Tuple.Create("CreateserBargain","Guid userId, int apId, string pid","userId, apId, pid","CreateBargainResult",
                @"/// <summary> 用户创建并砍价 </summary>",(string)null),
            Tuple.Create("GetInviteeBargainInfo","Guid idKey,Guid userId","idKey, userId","InviteeBarginInfo",
                @"/// <summary> 受邀人获取砍价结果 </summary>",(string)null)
        }),
        Tuple.Create("GroupBuying", @"/// <summary>拼团活动相关</summary>", new []{
            Tuple.Create("GetGroupBuyingProductList","int PageIndex = 1, int PageSize = 10, bool flag = false,string channel=default(string),bool isOldUser=false","PageIndex,PageSize,flag,channel,isOldUser","PagedModel<string>",
                @"/// <summary> 分页获取首页ProductGroupId </summary>",(string)null),
            Tuple.Create("SelectGroupBuyingProductsById","string ProductGroupId","ProductGroupId","List<string>",
                @"/// <summary> 根据ProductGroupId获取对应产品的PID </summary>",(string)null),
            Tuple.Create("SelectProductGroupInfo","List<string> ProductGroupIds","ProductGroupIds","List<ProductGroupModel>",
                @"/// <summary> 根据ProductGroupId获取对应ProductGroup信息 </summary>",(string)null),
            Tuple.Create("SelectProductInfoByPid","string ProductGroupId, string Pid","ProductGroupId, Pid","GroupBuyingProductModel",
                @"/// <summary> 根据PID获取对应产品的信息 </summary>",(string)null),
            Tuple.Create("SelectGroupInfoByProductGroupId","string ProductGroupId, Guid UserId, int Count = 100","ProductGroupId, UserId, Count","List<GroupInfoModel>",
                @"/// <summary> 根据PID获取该产品组下，该用户可以参加的若干个团 </summary>",(string)null),
            Tuple.Create("FetchGroupInfoByGroupId","Guid GroupId","GroupId","GroupInfoModel",
                @"/// <summary> 根据团号获取拼团信息 </summary>",(string)null),
            Tuple.Create("SelectGroupMemberByGroupId","Guid GroupId","GroupId","GroupMemberModel",
                @"/// <summary> 根据团号获取当前团成员 </summary>",(string)null),
            Tuple.Create("CheckGroupInfoByUserId","Guid GroupId, Guid UserId, string ProductGroupId,string pid=default(string)","GroupId, UserId, ProductGroupId, pid","CheckResultModel",
                @"/// <summary> 校验用户的参团资格 </summary>",(string)null),
            Tuple.Create("CreateGroupBuying","Guid UserId, string ProductGroupId, string Pid, int OrderId","UserId, ProductGroupId, Pid, OrderId","VerificationResultModel",
                @"/// <summary> 用户创建新团 </summary>",(string)null),
            Tuple.Create("TakePartInGroupBuying","Guid UserId, Guid GroupId, string Pid, int OrderId","UserId, GroupId, Pid, OrderId","VerificationResultModel",
                @"/// <summary> 用户参与拼团 </summary>",(string)null),
            Tuple.Create("GetUserGroupInfoByUserId","GroupInfoRequest request","request","PagedModel<UserGroupBuyingInfoModel>",
                @"/// <summary> 分页获取该用户下团号 </summary>",(string)null),
            Tuple.Create("RefreshCache","string ProductGroupId = null","ProductGroupId","VerificationResultModel",
                @"/// <summary> 刷新拼团产品缓存 </summary>",(string)null),
            Tuple.Create("RefreshGroupCache","Guid GroupId","GroupId","VerificationResultModel",
                @"/// <summary> 刷新拼团缓存 </summary>",(string)null),
		    Tuple.Create("FetchUserOrderInfo","Guid GroupId, Guid UserId","GroupId, UserId","UserOrderInfoModel",
                @"/// <summary> 根据团号，UserId获取用户订单信息 </summary>",(string)null),
            Tuple.Create("CancelGroupBuyingOrder","Guid GroupId, int OrderId","GroupId, OrderId","VerificationResultModel",
                @"/// <summary> 用户取消订单 </summary>",(string)null),
            Tuple.Create("ChangeGroupBuyingStatus","Guid GroupId, int OrderId","GroupId, OrderId","bool",
                @"/// <summary> 团长付款，该团可见 </summary>",(string)null),
            Tuple.Create("ChangeUserStatus","Guid GroupId, Guid UserId, int OrderId","GroupId, UserId, OrderId","bool",
                @"/// <summary> 团员付款加入 </summary>",(string)null),
            Tuple.Create("ExpireGroupBuying","Guid GroupId","GroupId","VerificationResultModel",
                @"/// <summary> 拼团过期 </summary>",(string)null),
            Tuple.Create("SelectProductGroupDetail","string ProductGroupId","ProductGroupId","List<ProductGroupModel>",
                @"/// <summary> 获取产品组中产品详细信息 </summary>", (string)null),
            Tuple.Create("FetchGroupInfoByOrderId","int OrderId","OrderId","GroupInfoModel",
                @"/// <summary> 根据OrderId查询团信息 </summary>", (string)null),
            Tuple.Create("FetchProductGroupInfoById","string ProductGroupId","ProductGroupId","ProductGroupModel",
                @"/// <summary> 根据ProductGroupId查询产品组详情 </summary>",(string)null),
            Tuple.Create("CheckNewUser","Guid userId, string openId = default(string)","userId,openId","NewUserCheckResultModel",
                @"/// <summary> 根据UserId和OpenId校验新人 </summary>",(string)null),
            Tuple.Create("SelectGroupInfoWithTotalCount","string ProductGroupId, Guid UserId, int Count = 100","ProductGroupId, UserId, Count","GroupInfoResponse",
                @"/// <summary> 根据PID获取该产品组下，该用户可以参加的若干个团(带有TotalCount) </summary>",(string)null),
            Tuple.Create("PushPinTuanMessage","Guid groupId,int batchId","groupId,batchId","bool",
                @"/// <summary>拼团推送 </summary>",(string)null),
            Tuple.Create("GetProductGroupInfoByPId","string pId","pId","GroupBuyingProductInfo",
                @"/// <summary>根据PID获取所属ProductGroupId以及价格</summary>",(string)null),
            Tuple.Create("SelectProductListByPids","List<GroupBuyingProductRequest> request","request","List<ProductGroupModel>",
                @"/// <summary>根据PID获取对应产品的信息(批量)</summary>",(string)null),
            Tuple.Create("GetLotteryRule","string productGroupId","productGroupId","GroupLotteryRuleModel",@"/// <summary>获取抽奖规则</summary>",(string)null),
            Tuple.Create("GetWinnerList","string productGroupId, int level = 0, int pageIndex = 1, int pageSize = 20",
                "productGroupId,level,pageIndex,pageSize","PagedModel<GroupBuyingLotteryInfo>",
                @"/// <summary>获取中奖名单</summary>",(string)null),
            Tuple.Create("CheckUserLotteryResult","Guid userId,string productGroupId,int orderId","userId,productGroupId,orderId",
                "GroupBuyingLotteryInfo",@"/// <summary> 查询用户中奖状态 </summary>", (string)null),
            Tuple.Create("GetUserLotteryHistory","Guid userId, List<int> orderIds","userId,orderIds","List<GroupBuyingLotteryInfo>",
                @"/// <summary>查询用户的中奖纪录</summary>",(string)null),
            Tuple.Create("GetActivityProductGroup","ActivityGroupRequest request","request","PagedModel<string>",
                @"/// <summary>按照拼团类型获取产品列表</summary>",(string)null),
            Tuple.Create("GetUserFreeCoupon","Guid userId","userId","List<FreeCouponModel>",
                @"/// <summary>查询用户免单券</summary>",(string)null),
            Tuple.Create("GetUserGroupCountByUserId","Guid userId","userId","GroupBuyingHistoryCount",
                @"/// <summary> 获取用户拼团记录统计 </summary>",(string)null),
            Tuple.Create("GetGroupFinalUserList","Guid groupId","groupId","List<GroupFinalUserModel>",
                @"/// <summary> 获取最终成团的用户信息 </summary>",(string)null),
            Tuple.Create("GetUserBuyLimitInfo","GroupBuyingBuyLimitRequest request","request","GroupBuyingBuyLimitModel",
                @"/// <summary> 查询用户限购信息 </summary>",(string)null),
            Tuple.Create("GetGroupBuyingCategoryInfo","","","List<GroupBuyingCategoryModel>",
                @"/// <summary> 查询拼团拼团类目信息 </summary>",(string)null),
            Tuple.Create("GetGroupBuyingProductListNew","GroupBuyingQueryRequest request","request","PagedModel<SimplegroupBuyingModel>",
                @"/// <summary> 查询拼团产品信息 </summary>",(string)null),
            Tuple.Create("UpdateGroupBuyingInfo","List<string> productGroupIds","productGroupIds","bool",
                @"/// <summary> 刷新ES数据 </summary>",(string)null),
            Tuple.Create("SearchGroupBuyingByKeyword","GroupBuyingQueryRequest request","request","PagedModel<SimplegroupBuyingModel>",
                "/// <summary> 根据关键词搜索拼团产品信息 </summary>\n\t\t[Obsolete(\"已废弃，请使用SelectGroupBuyingListNewAsync\",true)]",(string)null),
            Tuple.Create("SelectGroupBuyingListNew","GroupBuyingQueryRequest request","request","PagedModel<SimplegroupBuyingModel>",
                @"/// <summary> 查询拼团产品列表 </summary>",(string)null)
        }),
        Tuple.Create("SexAnnualVote",@"///<summary>六周年投票</summary>///",new []{
            Tuple.Create("AddShopSignUp","ShopVoteModel model","model","bool",
                @"/// <summary> 添加门店报名 </summary>",(string)null),
            Tuple.Create("AddEmployeeSignUp","ShopEmployeeVoteModel model","model","bool",
            @"/// <summary> 添加技师报名 </summary>",(string)null),
            Tuple.Create("CheckShopSignUp","long shopId","shopId","bool",
            @"/// <summary> 验证门店是否已经报过名 </summary>",(string)null),
            Tuple.Create("CheckEmployeeSignUp","long shopId,long employeeId","shopId,employeeId","bool",
            @"/// <summary> 验证技师是否已经报过名 </summary>",(string)null),
            Tuple.Create("SelectShopRanking","SexAnnualVoteQueryRequest query","query","PagedModel<ShopVoteBaseModel>",
            @"/// <summary> 查询门店投票排名 </summary>",(string)null),
            Tuple.Create("SelectShopEmployeeRanking","SexAnnualVoteQueryRequest query","query","PagedModel<ShopEmployeeVoteBaseModel>",
            @"/// <summary> 查询技师投票排名 </summary>",(string)null),
            Tuple.Create("FetchShopBaseInfo","long pkid","pkid","ShopVoteModel",
            @"/// <summary> 根据pkid查询门店基本详情（ShopId） </summary>",(string)null),
            Tuple.Create("FetchShopDetail","long shopId","shopId","ShopVoteModel",
            @"/// <summary> 查询门店详情 </summary>",(string)null),
            Tuple.Create("FetchShopEmployeeBaseInfo","long pkid","pkid","ShopEmployeeVoteModel",
            @"/// <summary> 根据pkid查询技师基本信息 </summary>",(string)null),
            Tuple.Create("FetchShopEmployeeDetail","long shopId,long employeeId","shopId,employeeId","ShopEmployeeVoteModel",
            @"/// <summary> 查询技师详情 </summary>",(string)null),
            Tuple.Create("AddShopVote","Guid userId,long shopId","userId,shopId","bool",
            @"/// <summary> 给门店投票 </summary>",(string)null),
            Tuple.Create("SelectShopVoteRecord","Guid userId,DateTime startDate,DateTime endDate","userId,startDate,endDate","IEnumerable<ShopVoteRecordModel>",
            @"/// <summary> 获取某个用户时间段内的门店投票记录 </summary>",(string)null),
            Tuple.Create("AddShareShopVote","Guid userId,long shopId","userId,shopId","bool",
            @"/// <summary> 分享门店投票信息 </summary>",(string)null),
            Tuple.Create("AddShopEmployeeVote","Guid userId,long shopId,long employeeId","userId,shopId,employeeId","bool",
             @"/// <summary> 给技师投票 </summary>",(string)null),
            Tuple.Create("SelectShopEmployeeVoteRecord","Guid userId,DateTime startDate,DateTime endDate","userId,startDate,endDate","IEnumerable<ShopEmployeeVoteRecordModel>",
             @"/// <summary> 获取某个用户时间段内的技师投票记录 </summary>",(string)null),
            Tuple.Create("AddShareShopEmployeeVote","Guid userId,long shopId,long employeeId","userId,shopId,employeeId","bool",
            @"/// <summary> 分享技师投票信息 </summary>",(string)null),
            Tuple.Create("GetShopRegion","","","IDictionary<int,Shop.Models.RegionModel>",
            @"/// <summary> 获取门店报名城市二级联动 </summary>",(string)null),
            Tuple.Create("GetShopEmployeeRegion","","","IDictionary<int,Shop.Models.RegionModel>",
            @"/// <summary> 获取技师报名城市二级联动 </summary>",(string)null),
        }),
         Tuple.Create("CategoryBrandRank",@"///<summary>2017年双11分品类品牌销量排名 2017</summary>///",new []{
            Tuple.Create("SelectAllCategoryBrandByDate","DateTime date","date","IEnumerable<CategoryBrandRankModel>",
                @"/// <summary> 获取某天的所有分类品牌销量排名 </summary>",(string)null)
        }),

         Tuple.Create("Questionnaire",@"/// <summary>问卷服务</summary>",new []{
            Tuple.Create("GetQuestionnaireURL","GetQuestionnaireURLRequest model","model","string",@"///<summary>获取用户的问卷链接信息</summary>/// <returns> </returns>",(string)null),
            Tuple.Create("GetQuestionnaireInfo","Guid pageId","pageId","GetQuestionnaireInfoResponse",@"///<summary>获取问卷信息</summary>/// <returns> </returns>",(string)null),
            Tuple.Create("SubmitQuestionnaire","SubmitQuestionnaireRequest model","model","bool",@"///<summary>提交问卷</summary>/// <returns> </returns>",(string)null),
      })
   };
   foreach (var service in services)
   { #>
	<#= service.Item2 #>
    [ServiceContract(Namespace = TuhuSerivce.TuhuSerivceNamespace)]
    public interface I<#= service.Item1 #>Service
    {
    <# foreach (var method in service.Item3)
       { #>
	<#= method.Item5 #>
        [OperationContract(Action = TuhuSerivce.TuhuSerivceNamespace + "/<#= projectName #>/<#= service.Item1 #>/<#= method.Item6 ?? method.Item1 #>", ReplyAction = TuhuSerivce.TuhuSerivceNamespace + "/<#= projectName #>/<#= service.Item1 #>/<#= method.Item6 ?? method.Item1 #>Response")]
        Task<OperationResult<<#= method.Item4 #>>> <#= method.Item1 #>Async(<#= method.Item2 #>);
	<# } #>}

	<#= service.Item2 #>
    [ServiceContract(Namespace = TuhuSerivce.TuhuSerivceNamespace)]
    public interface I<#= service.Item1 #>Client : I<#= service.Item1 #>Service, ITuhuServiceClient
    {
    <# foreach (var method in service.Item3)
       { #>
	<#= method.Item5 #>
        [OperationContract(Action = TuhuSerivce.TuhuSerivceNamespace + "/<#= projectName #>/<#= service.Item1 #>/<#= method.Item6 ?? method.Item1 #>", ReplyAction = TuhuSerivce.TuhuSerivceNamespace + "/<#= projectName #>/<#= service.Item1 #>/<#= method.Item6 ?? method.Item1 #>Response")]
        OperationResult<<#= method.Item4 #>> <#= method.Item1 #>(<#= method.Item2 #>);
	<# } #>}

	<#= service.Item2 #>
	public partial class <#= service.Item1 #>Client : TuhuServiceClient<I<#= service.Item1 #>Client>, I<#= service.Item1 #>Client
    {
    <# foreach (var method in service.Item3)
       { #>
	<#= method.Item5 #>
        public OperationResult<<#= method.Item4 #>> <#= method.Item1 #>(<#= method.Item2 #>) => Invoke(_ => _.<#= method.Item1 #>(<#= method.Item3 #>));

	<#= method.Item5 #>
        public Task<OperationResult<<#= method.Item4 #>>> <#= method.Item1 #>Async(<#= method.Item2 #>) => InvokeAsync(_ => _.<#= method.Item1 #>Async(<#= method.Item3 #>));
	<# } #>}
<# } #>
}
